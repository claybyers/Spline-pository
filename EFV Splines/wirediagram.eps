%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: wirediagram copy.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: Matt
%%CreationDate: 9/2/16, 10:38 AM
%%BoundingBox: 0 0 614 345
%%HiResBoundingBox: 0 0 614 345
%%CropBox: 0 0 614 345
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 552 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2016-09-02T14:34:25Z"
   xmp:ModifyDate="2016-09-02T14:34:25Z"
   pdf:Producer="Mac OS X 10.11.6 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -345 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345 li
614 345 li
614 0 li
cp
clp
gsave
0 345 mo
614 345 li
614 0 li
0 0 li
0 345 li
clp
614 345 mo
0 345 li
0 0 li
614 0 li
614 345 li
50.6717 268.552 mo
50.3678 269.505 li
59.7815 272.507 69.8311 275.346 80.4615 278.005 cv
147.465 294.766 230.829 303 313.873 303.001 cv
410.875 303 507.429 291.766 576.96 269.719 cv
576.96 269.719 li
576.773 269.129 li
577 269.129 li
577 264.936 li
577.006 264.943 li
577.725 264.247 li
538.859 224.152 li
538.5 224.5 li
538 224.5 li
538 225.5 li
538.773 225.5 li
576.577 264.5 li
576.192 264.5 li
576.072 264.118 li
575.882 264.178 575.689 264.238 575.498 264.298 cv
575.498 264 li
574.498 264 li
574.498 264.609 li
573.634 264.876 572.76 265.144 571.888 265.409 cv
572.514 264.782 li
571.807 264.075 li
571.498 264.384 li
571.498 264 li
570.468 264 li
571.099 263.368 li
570.392 262.661 li
569.685 263.369 li
570.317 264 li
563.498 264 li
563.498 265 li
571.318 265 li
571.764 265.446 li
502.765 286.342 408.526 297.001 313.897 297.001 cv
313.891 297.001 313.884 297.001 313.879 297.001 cv
230.608 297.002 147.024 288.752 80.0446 271.997 cv
71.2027 269.785 62.7683 267.45 54.7728 265 cv
58.5001 265 li
58.5001 264 li
51.5535 264 li
51.4541 263.969 51.3548 263.937 51.2556 263.906 cv
51.226 264 li
50.5 264 li
50.5 265 li
51.4003 265 li
60.3194 267.806 69.8022 270.465 79.8019 272.967 cv
146.894 289.749 230.541 298 313.879 298.001 cv
408.828 298 503.368 287.291 572.566 266.248 cv
573.222 266.903 li
573.929 266.196 li
573.65 265.917 li
574.438 265.675 575.218 265.433 576 265.188 cv
576 268.367 li
575.344 269.023 li
575.463 269.142 li
506.182 290.894 410.251 302.001 313.891 302.001 cv
313.885 302.001 313.879 302.001 313.873 302.001 cv
230.896 302.002 147.595 293.769 80.7042 277.035 cv
70.0924 274.381 60.063 271.548 50.6717 268.552 cv
574.636 266.902 mo
573.929 267.61 li
574.637 268.317 li
575.344 267.609 li
574.636 266.902 li
559.498 264 mo
559.498 265 li
560.498 265 li
560.498 264 li
559.498 264 li
555.498 264 mo
555.498 265 li
556.498 265 li
556.498 264 li
555.498 264 li
544.498 264 mo
544.498 265 li
552.498 265 li
552.498 264 li
544.498 264 li
540.499 264 mo
540.498 265 li
541.499 265 li
541.499 264 li
540.499 264 li
536.499 264 mo
536.499 265 li
537.499 265 li
537.499 264 li
536.499 264 li
525.499 264 mo
525.499 265 li
533.498 265 li
533.499 264 li
525.499 264 li
521.499 264 mo
521.499 265 li
522.499 265 li
522.499 264 li
521.499 264 li
517.499 264 mo
517.499 265 li
518.498 265 li
518.499 264 li
517.499 264 li
506.499 264 mo
506.499 265 li
514.499 265 li
514.499 264 li
506.499 264 li
502.499 264 mo
502.499 265 li
503.499 265 li
503.499 264 li
502.499 264 li
498.499 264 mo
498.499 265 li
499.499 265 li
499.499 264 li
498.499 264 li
487.499 264 mo
487.499 265 li
495.499 265 li
495.499 264 li
487.499 264 li
483.499 264 mo
483.499 265 li
484.499 265 li
484.499 264 li
483.499 264 li
479.499 264 mo
479.499 265 li
480.499 265 li
480.499 264 li
479.499 264 li
468.499 264 mo
468.499 265 li
476.499 265 li
476.499 264 li
468.499 264 li
464.499 264 mo
464.499 265 li
465.499 265 li
465.499 264 li
464.499 264 li
460.499 264 mo
460.499 265 li
461.499 265 li
461.499 264 li
460.499 264 li
449.499 264 mo
449.499 265 li
457.499 265 li
457.499 264 li
449.499 264 li
445.499 264 mo
445.499 265 li
446.499 265 li
446.499 264 li
445.499 264 li
441.499 264 mo
441.499 265 li
442.499 265 li
442.499 264 li
441.499 264 li
430.499 264 mo
430.499 265 li
438.499 265 li
438.499 264 li
430.499 264 li
426.499 264 mo
426.499 265 li
427.499 265 li
427.499 264 li
426.499 264 li
422.499 264 mo
422.499 265 li
423.499 265 li
423.499 264 li
422.499 264 li
411.499 264 mo
411.499 265 li
419.499 265 li
419.499 264 li
411.499 264 li
407.499 264 mo
407.499 265 li
408.499 265 li
408.499 264 li
407.499 264 li
403.499 264 mo
403.499 265 li
404.499 265 li
404.499 264 li
403.499 264 li
392.499 264 mo
392.499 265 li
400.499 265 li
400.499 264 li
392.499 264 li
388.499 264 mo
388.499 265 li
389.499 265 li
389.499 264 li
388.499 264 li
384.499 264 mo
384.499 265 li
385.499 265 li
385.499 264 li
384.499 264 li
373.499 264 mo
373.499 265 li
381.499 265 li
381.499 264 li
373.499 264 li
369.499 264 mo
369.499 265 li
370.499 265 li
370.499 264 li
369.499 264 li
365.499 264 mo
365.499 265 li
366.499 265 li
366.499 264 li
365.499 264 li
354.499 264 mo
354.499 265 li
362.499 265 li
362.499 264 li
354.499 264 li
350.499 264 mo
350.499 265 li
351.499 265 li
351.499 264 li
350.499 264 li
346.499 264 mo
346.499 265 li
347.499 265 li
347.499 264 li
346.499 264 li
335.499 264 mo
335.499 265 li
343.499 265 li
343.499 264 li
335.499 264 li
331.499 264 mo
331.499 265 li
332.499 265 li
332.499 264 li
331.499 264 li
327.499 264 mo
327.499 265 li
328.499 265 li
328.499 264 li
327.499 264 li
316.499 264 mo
316.499 265 li
324.499 265 li
324.499 264 li
316.499 264 li
312.499 264 mo
312.499 265 li
313.499 265 li
313.499 264 li
312.499 264 li
308.499 264 mo
308.499 265 li
309.499 265 li
309.499 264 li
308.499 264 li
297.499 264 mo
297.499 265 li
305.499 265 li
305.499 264 li
297.499 264 li
293.499 264 mo
293.499 265 li
294.499 265 li
294.499 264 li
293.499 264 li
289.499 264 mo
289.499 265 li
290.499 265 li
290.499 264 li
289.499 264 li
278.499 264 mo
278.499 265 li
286.5 265 li
286.5 264 li
278.499 264 li
274.5 264.001 mo
274.5 265 li
275.5 265 li
275.5 264 li
275.061 264 li
275.061 263.001 li
274.873 263.001 li
274.602 263.001 274.332 263.001 274.061 263.001 cv
274.061 264.001 li
274.207 264.001 274.353 264.001 274.5 264.001 cv
270.5 264 mo
270.5 265 li
271.5 265 li
271.5 264 li
270.5 264 li
259.5 264 mo
259.5 265 li
267.499 265 li
267.5 264 li
259.5 264 li
255.5 264 mo
255.5 265 li
256.5 265 li
256.5 264 li
255.5 264 li
251.5 264 mo
251.5 265 li
252.5 265 li
252.5 264 li
251.5 264 li
240.5 264 mo
240.5 265 li
248.5 265 li
248.5 264 li
240.5 264 li
236.5 264 mo
236.5 265 li
237.5 265 li
237.5 264 li
236.5 264 li
232.5 264 mo
232.5 265 li
233.5 265 li
233.5 264 li
232.5 264 li
221.5 264 mo
221.5 265 li
229.5 265 li
229.5 264 li
221.5 264 li
217.5 264 mo
217.5 265 li
218.5 265 li
218.5 264 li
217.5 264 li
213.5 264 mo
213.5 265 li
214.5 265 li
214.5 264 li
213.5 264 li
202.5 264 mo
202.5 265 li
210.5 265 li
210.5 264 li
202.5 264 li
198.5 264 mo
198.5 265 li
199.5 265 li
199.5 264 li
198.5 264 li
194.5 264 mo
194.5 265 li
195.5 265 li
195.5 264 li
194.5 264 li
183.5 264 mo
183.5 265 li
191.5 265 li
191.5 264 li
183.5 264 li
179.5 264 mo
179.5 265 li
180.5 265 li
180.5 264 li
179.5 264 li
175.5 264 mo
175.5 265 li
176.5 265 li
176.5 264 li
175.5 264 li
164.5 264 mo
164.5 265 li
172.5 265 li
172.5 264 li
164.5 264 li
160.5 264 mo
160.5 265 li
161.5 265 li
161.5 264 li
160.5 264 li
156.5 264 mo
156.5 265 li
157.5 265 li
157.5 264 li
156.5 264 li
145.5 264 mo
145.5 265 li
153.5 265 li
153.5 264 li
145.5 264 li
141.5 264 mo
141.5 265 li
142.5 265 li
142.5 264 li
141.5 264 li
137.5 264 mo
137.5 265 li
138.5 265 li
138.5 264 li
137.5 264 li
126.5 264 mo
126.5 265 li
134.5 265 li
134.5 264 li
126.5 264 li
122.5 264 mo
122.5 265 li
123.5 265 li
123.5 264 li
122.5 264 li
118.5 264 mo
118.5 265 li
119.5 265 li
119.5 264 li
118.5 264 li
107.5 264 mo
107.5 265 li
115.5 265 li
115.5 264 li
107.5 264 li
103.5 264 mo
103.5 265 li
104.5 265 li
104.5 264 li
103.5 264 li
99.5 264 mo
99.5 265 li
100.5 265 li
100.5 264 li
99.5 264 li
88.5 264 mo
88.5 265 li
96.5 265 li
96.5 264 li
88.5 264 li
84.5 264 mo
84.5 265 li
85.5 265 li
85.5 264 li
84.5 264 li
80.5 264 mo
80.5 265 li
81.4999 265 li
81.4999 264 li
80.5 264 li
69.5001 264 mo
69.5001 265 li
77.5 265 li
77.5 264 li
69.5001 264 li
65.4999 264 mo
65.4999 265 li
66.5 265 li
66.5 264 li
65.4999 264 li
61.5 264 mo
61.5 265 li
62.5 265 li
62.5 264 li
61.5 264 li
277.06 262.999 mo
276.727 263 276.393 263 276.06 263 cv
276.061 264 li
276.395 264 276.728 264 277.062 263.999 cv
277.06 262.999 li
272.062 262.998 mo
272.059 263.998 li
272.393 263.999 272.726 263.999 273.06 264 cv
273.061 263 li
272.728 262.999 272.395 262.999 272.062 262.998 cv
279.059 262.994 mo
278.726 262.995 278.393 262.996 278.06 262.997 cv
278.062 263.997 li
278.396 263.996 278.729 263.995 279.062 263.994 cv
279.059 262.994 li
270.062 262.992 mo
270.058 263.992 li
270.392 263.993 270.725 263.994 271.059 263.995 cv
271.062 262.995 li
270.728 262.994 270.395 262.993 270.062 262.992 cv
281.058 262.986 mo
280.725 262.987 280.392 262.989 280.059 262.99 cv
280.063 263.99 li
280.396 263.989 280.729 263.987 281.063 263.986 cv
281.063 263.986 li
281.058 262.986 li
268.062 262.982 mo
268.057 263.982 li
268.39 263.984 268.724 263.986 269.057 263.988 cv
269.062 262.988 li
268.729 262.986 268.395 262.984 268.062 262.982 cv
283.057 262.974 mo
282.724 262.976 282.391 262.979 282.058 262.98 cv
282.063 263.98 li
282.397 263.978 282.73 263.976 283.063 263.974 cv
283.057 262.974 li
266.062 262.97 mo
266.055 263.97 li
266.388 263.972 266.722 263.975 267.056 263.977 cv
267.062 262.977 li
266.728 262.975 266.395 262.972 266.062 262.97 cv
285.055 262.96 mo
284.722 262.962 284.389 262.965 284.056 262.967 cv
284.063 263.967 li
284.397 263.965 284.73 263.962 285.064 263.96 cv
285.064 263.96 li
285.055 262.96 li
264.062 262.954 mo
264.053 263.954 li
264.387 263.957 264.72 263.96 265.054 263.963 cv
265.062 262.963 li
264.728 262.96 264.395 262.957 264.062 262.954 cv
287.054 262.942 mo
286.721 262.945 286.388 262.948 286.055 262.951 cv
286.064 263.951 li
286.397 263.948 286.73 263.945 287.064 263.942 cv
287.054 262.942 li
262.061 262.936 mo
262.051 263.935 li
262.385 263.939 262.719 263.942 263.052 263.945 cv
263.062 262.945 li
262.728 262.942 262.395 262.939 262.061 262.936 cv
289.052 262.921 mo
288.719 262.925 288.386 262.928 288.053 262.932 cv
288.064 263.932 li
288.397 263.928 288.73 263.925 289.063 263.921 cv
289.052 262.921 li
260.061 262.914 mo
260.049 263.913 li
260.383 263.917 260.716 263.921 261.05 263.925 cv
261.061 262.925 li
260.728 262.921 260.394 262.917 260.061 262.914 cv
291.05 262.897 mo
290.717 262.901 290.384 262.905 290.051 262.909 cv
290.063 263.909 li
290.397 263.905 290.73 263.901 291.063 263.897 cv
291.05 262.897 li
259.048 263.901 mo
259.048 263.901 li
259.048 263.901 li
259.048 263.901 259.048 263.901 259.048 263.901 cv
259.061 262.901 li
258.727 262.897 258.394 262.893 258.06 262.888 cv
258.047 263.888 li
258.38 263.893 258.714 263.897 259.048 263.901 cv
293.048 262.869 mo
292.715 262.874 292.382 262.879 292.049 262.883 cv
292.063 263.883 li
292.396 263.879 292.729 263.874 293.062 263.869 cv
293.048 262.869 li
256.06 262.86 mo
256.045 263.86 li
256.378 263.865 256.712 263.87 257.046 263.874 cv
257.06 262.874 li
256.726 262.87 256.393 262.865 256.06 262.86 cv
295.045 262.839 mo
294.712 262.844 294.379 262.849 294.046 262.854 cv
294.062 263.854 li
294.395 263.849 294.728 263.844 295.061 263.839 cv
295.045 262.839 li
254.059 262.828 mo
254.042 263.828 li
254.376 263.834 254.71 263.839 255.043 263.844 cv
255.059 262.844 li
254.726 262.839 254.392 262.834 254.059 262.828 cv
297.042 262.805 mo
296.709 262.811 296.377 262.817 296.044 262.822 cv
296.061 263.822 li
296.394 263.816 296.727 263.811 297.06 263.805 cv
297.042 262.805 li
252.058 262.793 mo
252.04 263.793 li
252.373 263.799 252.707 263.805 253.041 263.811 cv
253.058 262.811 li
252.725 262.805 252.391 262.799 252.058 262.793 cv
299.039 262.768 mo
298.706 262.774 298.374 262.781 298.041 262.787 cv
298.059 263.787 li
298.393 263.781 298.725 263.774 299.058 263.768 cv
299.039 262.768 li
250.057 262.755 mo
250.037 263.755 li
250.371 263.762 250.704 263.768 251.038 263.775 cv
251.057 262.775 li
250.724 262.768 250.39 262.762 250.057 262.755 cv
301.036 262.728 mo
300.703 262.735 300.37 262.742 300.038 262.748 cv
300.058 263.748 li
300.391 263.741 300.724 263.735 301.057 263.728 cv
301.036 262.728 li
248.056 262.714 mo
248.034 263.714 li
248.368 263.721 248.702 263.728 249.036 263.735 cv
249.056 262.735 li
248.722 262.728 248.389 262.721 248.056 262.714 cv
303.032 262.685 mo
302.699 262.692 302.367 262.699 302.034 262.707 cv
302.056 263.706 li
302.389 263.699 302.722 263.692 303.055 263.684 cv
303.055 263.684 li
303.032 262.685 li
246.054 262.669 mo
246.031 263.669 li
246.365 263.677 246.699 263.684 247.033 263.692 cv
247.055 262.692 li
246.721 262.685 246.388 262.677 246.054 262.669 cv
305.028 262.638 mo
304.696 262.646 304.363 262.654 304.03 262.662 cv
304.053 263.662 li
304.387 263.654 304.719 263.646 305.052 263.638 cv
305.028 262.638 li
244.053 262.622 mo
244.028 263.621 li
244.362 263.629 244.696 263.638 245.03 263.646 cv
245.054 262.646 li
244.72 262.638 244.386 262.63 244.053 262.622 cv
307.024 262.588 mo
306.691 262.597 306.359 262.605 306.026 262.614 cv
306.051 263.613 li
306.384 263.605 306.717 263.597 307.05 263.588 cv
307.024 262.588 li
243.027 263.596 mo
243.027 263.596 li
243.027 263.596 li
243.027 263.596 243.027 263.596 243.027 263.596 cv
243.052 262.596 li
242.718 262.588 242.385 262.579 242.051 262.57 cv
242.025 263.57 li
242.359 263.579 242.693 263.588 243.027 263.596 cv
309.02 262.535 mo
308.687 262.545 308.354 262.553 308.022 262.562 cv
308.048 263.562 li
308.381 263.553 308.714 263.544 309.047 263.535 cv
309.047 263.535 li
309.02 262.535 li
240.05 262.516 mo
240.022 263.516 li
240.356 263.525 240.69 263.534 241.024 263.543 cv
241.051 262.544 li
240.717 262.535 240.383 262.526 240.05 262.516 cv
311.015 262.479 mo
310.682 262.489 310.35 262.498 310.017 262.508 cv
310.045 263.507 li
310.378 263.498 310.711 263.488 311.044 263.479 cv
311.015 262.479 li
238.048 262.459 mo
238.019 263.458 li
238.353 263.468 238.686 263.478 239.02 263.488 cv
239.049 262.488 li
238.715 262.478 238.382 262.469 238.048 262.459 cv
313.01 262.42 mo
312.677 262.43 312.345 262.44 312.012 262.45 cv
312.042 263.45 li
312.375 263.44 312.707 263.43 313.04 263.419 cv
313.01 262.42 li
236.047 262.398 mo
236.015 263.397 li
236.349 263.408 236.683 263.418 237.017 263.428 cv
237.047 262.429 li
236.714 262.419 236.38 262.408 236.047 262.398 cv
315.004 262.357 mo
314.672 262.368 314.339 262.379 314.007 262.389 cv
314.038 263.389 li
314.371 263.378 314.704 263.367 315.036 263.357 cv
315.004 262.357 li
234.045 262.334 mo
234.012 263.333 li
234.346 263.344 234.68 263.355 235.014 263.366 cv
235.046 262.366 li
234.712 262.356 234.378 262.345 234.045 262.334 cv
316.999 262.292 mo
316.666 262.303 316.334 262.314 316.001 262.325 cv
316.034 263.324 li
316.367 263.313 316.7 263.302 317.032 263.291 cv
316.999 262.292 li
232.043 262.267 mo
232.008 263.266 li
232.342 263.278 232.676 263.289 233.01 263.3 cv
233.044 262.301 li
232.71 262.29 232.376 262.278 232.043 262.267 cv
318.993 262.223 mo
318.66 262.234 318.328 262.246 317.996 262.257 cv
318.03 263.257 li
318.363 263.245 318.695 263.234 319.028 263.222 cv
318.993 262.223 li
230.041 262.196 mo
230.005 263.195 li
230.339 263.207 230.673 263.219 231.007 263.231 cv
231.042 262.232 li
230.708 262.22 230.375 262.208 230.041 262.196 cv
320.986 262.15 mo
320.654 262.163 320.322 262.175 319.989 262.187 cv
320.026 263.186 li
320.358 263.174 320.691 263.162 321.023 263.15 cv
320.986 262.15 li
228.039 262.122 mo
228.001 263.122 li
228.335 263.134 228.669 263.147 229.003 263.159 cv
229.04 262.159 li
228.706 262.147 228.373 262.135 228.039 262.122 cv
322.98 262.075 mo
322.647 262.088 322.315 262.1 321.983 262.113 cv
322.021 263.112 li
322.354 263.1 322.686 263.087 323.018 263.074 cv
322.98 262.075 li
226.037 262.045 mo
225.998 263.044 li
226.332 263.057 226.666 263.071 227 263.083 cv
227.038 262.084 li
226.704 262.071 226.371 262.058 226.037 262.045 cv
324.973 261.996 mo
324.64 262.009 324.308 262.023 323.976 262.036 cv
324.016 263.035 li
324.348 263.022 324.68 263.009 325.013 262.995 cv
324.973 261.996 li
224.035 261.965 mo
223.994 262.964 li
224.328 262.978 224.662 262.991 224.996 263.004 cv
225.036 262.005 li
224.702 261.992 224.369 261.978 224.035 261.965 cv
326.965 261.914 mo
326.633 261.928 326.301 261.942 325.969 261.956 cv
326.01 262.955 li
326.342 262.941 326.675 262.927 327.007 262.913 cv
326.965 261.914 li
222.033 261.881 mo
221.99 262.88 li
222.324 262.894 222.658 262.908 222.992 262.922 cv
223.034 261.923 li
222.7 261.909 222.367 261.895 222.033 261.881 cv
328.958 261.829 mo
328.625 261.843 328.293 261.858 327.961 261.872 cv
328.004 262.871 li
328.337 262.857 328.669 262.842 329.001 262.828 cv
328.958 261.829 li
220.031 261.794 mo
219.986 262.793 li
220.321 262.808 220.654 262.822 220.988 262.837 cv
221.032 261.838 li
220.698 261.823 220.364 261.809 220.031 261.794 cv
330.95 261.74 mo
330.618 261.755 330.286 261.77 329.954 261.785 cv
329.998 262.784 li
330.33 262.769 330.662 262.754 330.995 262.739 cv
330.95 261.74 li
218.029 261.703 mo
217.983 262.702 li
218.317 262.718 218.651 262.733 218.985 262.748 cv
219.03 261.749 li
218.696 261.734 218.362 261.719 218.029 261.703 cv
332.941 261.649 mo
332.609 261.664 332.277 261.679 331.945 261.695 cv
331.991 262.694 li
332.324 262.678 332.656 262.663 332.988 262.648 cv
332.988 262.647 li
332.941 261.649 li
568.977 261.248 mo
568.271 261.955 li
568.978 262.662 li
569.685 261.954 li
568.977 261.248 li
216.027 261.61 mo
215.979 262.608 li
216.313 262.624 216.647 262.64 216.981 262.656 cv
217.028 261.657 li
216.694 261.641 216.36 261.625 216.027 261.61 cv
334.932 261.553 mo
334.601 261.57 334.269 261.586 333.937 261.601 cv
333.984 262.6 li
334.317 262.584 334.649 262.569 334.981 262.552 cv
334.932 261.553 li
214.024 261.512 mo
213.975 262.511 li
214.309 262.528 214.643 262.544 214.977 262.56 cv
215.025 261.561 li
214.692 261.545 214.358 261.529 214.024 261.512 cv
336.923 261.455 mo
336.591 261.472 336.26 261.488 335.928 261.505 cv
335.977 262.503 li
336.309 262.487 336.641 262.471 336.973 262.454 cv
336.923 261.455 li
212.022 261.412 mo
211.971 262.411 li
212.305 262.428 212.639 262.444 212.973 262.461 cv
213.023 261.463 li
212.689 261.446 212.356 261.429 212.022 261.412 cv
338.914 261.353 mo
338.582 261.371 338.25 261.388 337.919 261.405 cv
337.97 262.403 li
338.302 262.387 338.634 262.369 338.966 262.352 cv
338.914 261.353 li
210.02 261.308 mo
209.967 262.307 li
210.301 262.324 210.635 262.342 210.969 262.359 cv
211.021 261.36 li
210.687 261.343 210.354 261.326 210.02 261.308 cv
340.904 261.248 mo
340.572 261.266 340.241 261.284 339.909 261.301 cv
339.961 262.3 li
340.294 262.282 340.626 262.265 340.957 262.247 cv
340.904 261.248 li
208.018 261.201 mo
207.964 262.199 li
208.297 262.217 208.631 262.236 208.965 262.253 cv
209.019 261.255 li
208.685 261.237 208.351 261.219 208.018 261.201 cv
342.894 261.14 mo
342.562 261.159 342.23 261.177 341.899 261.195 cv
341.953 262.193 li
342.285 262.175 342.617 262.157 342.949 262.139 cv
342.894 261.14 li
206.016 261.09 mo
205.96 262.089 li
206.294 262.107 206.628 262.126 206.962 262.144 cv
207.017 261.146 li
206.683 261.128 206.349 261.109 206.016 261.09 cv
344.883 261.029 mo
344.551 261.048 344.22 261.066 343.888 261.085 cv
343.944 262.083 li
344.276 262.065 344.608 262.046 344.94 262.027 cv
344.883 261.029 li
204.014 260.976 mo
203.956 261.974 li
204.29 261.994 204.624 262.013 204.958 262.032 cv
205.015 261.034 li
204.681 261.015 204.347 260.995 204.014 260.976 cv
346.872 260.914 mo
346.54 260.933 346.209 260.953 345.877 260.972 cv
345.935 261.97 li
346.267 261.951 346.599 261.932 346.93 261.912 cv
346.872 260.914 li
202.011 260.859 mo
201.952 261.857 li
202.286 261.877 202.62 261.896 202.954 261.916 cv
202.954 261.916 li
203.012 260.918 li
202.679 260.898 202.345 260.878 202.011 260.859 cv
348.86 260.795 mo
348.529 260.815 348.198 260.835 347.866 260.855 cv
347.926 261.853 li
348.257 261.834 348.589 261.814 348.921 261.794 cv
348.86 260.795 li
200.009 260.738 mo
199.948 261.736 li
200.282 261.756 200.616 261.777 200.95 261.797 cv
201.01 260.799 li
200.677 260.778 200.343 260.758 200.009 260.738 cv
350.849 260.674 mo
350.517 260.694 350.186 260.715 349.854 260.735 cv
349.915 261.733 li
350.247 261.713 350.579 261.693 350.91 261.672 cv
350.849 260.674 li
198.007 260.613 mo
197.944 261.611 li
198.278 261.632 198.612 261.653 198.946 261.674 cv
199.008 260.676 li
198.675 260.655 198.341 260.634 198.007 260.613 cv
352.836 260.549 mo
352.505 260.57 352.174 260.591 351.842 260.612 cv
351.905 261.61 li
352.237 261.589 352.568 261.568 352.9 261.547 cv
352.836 260.549 li
196.005 260.486 mo
195.941 261.483 li
196.275 261.505 196.609 261.527 196.943 261.548 cv
197.006 260.55 li
196.672 260.529 196.339 260.507 196.005 260.486 cv
354.823 260.421 mo
354.492 260.442 354.161 260.464 353.83 260.485 cv
353.894 261.483 li
354.226 261.462 354.557 261.44 354.889 261.418 cv
354.823 260.421 li
194.003 260.354 mo
193.937 261.352 li
194.271 261.374 194.605 261.396 194.939 261.418 cv
195.004 260.42 li
194.67 260.398 194.337 260.376 194.003 260.354 cv
356.81 260.289 mo
356.479 260.311 356.148 260.333 355.817 260.355 cv
355.883 261.353 li
356.215 261.331 356.546 261.309 356.877 261.287 cv
356.81 260.289 li
192.001 260.22 mo
191.933 261.217 li
192.267 261.24 192.601 261.263 192.935 261.285 cv
193.002 260.287 li
192.669 260.265 192.335 260.242 192.001 260.22 cv
567.563 259.834 mo
566.856 260.541 li
567.563 261.248 li
568.27 260.541 li
567.563 259.834 li
358.797 260.154 mo
358.466 260.176 358.135 260.199 357.804 260.222 cv
357.871 261.219 li
358.203 261.197 358.534 261.174 358.865 261.151 cv
358.797 260.154 li
190 260.081 mo
189.93 261.079 li
190.264 261.102 190.597 261.125 190.931 261.148 cv
191 260.151 li
190.666 260.128 190.333 260.105 190 260.081 cv
360.782 260.015 mo
360.451 260.038 360.121 260.062 359.79 260.085 cv
359.859 261.082 li
360.191 261.059 360.522 261.036 360.853 261.013 cv
360.782 260.015 li
187.998 259.939 mo
187.926 260.937 li
188.26 260.961 188.594 260.985 188.928 261.008 cv
188.999 260.011 li
188.665 259.987 188.331 259.963 187.998 259.939 cv
362.768 259.873 mo
362.437 259.897 362.106 259.921 361.775 259.945 cv
361.846 260.942 li
362.178 260.918 362.509 260.895 362.84 260.871 cv
362.768 259.873 li
185.996 259.794 mo
185.923 260.791 li
186.257 260.816 186.59 260.84 186.924 260.865 cv
186.997 259.867 li
186.663 259.843 186.33 259.819 185.996 259.794 cv
364.753 259.728 mo
364.422 259.752 364.091 259.777 363.76 259.801 cv
363.833 260.798 li
364.165 260.774 364.496 260.75 364.827 260.725 cv
364.753 259.728 li
183.994 259.645 mo
183.919 260.642 li
184.253 260.667 184.587 260.693 184.921 260.717 cv
184.995 259.72 li
184.661 259.695 184.328 259.67 183.994 259.645 cv
366.737 259.579 mo
366.407 259.604 366.076 259.629 365.745 259.654 cv
365.82 260.651 li
366.151 260.626 366.482 260.601 366.813 260.576 cv
366.737 259.579 li
181.993 259.493 mo
181.916 260.49 li
182.25 260.516 182.584 260.541 182.918 260.566 cv
182.994 259.569 li
182.66 259.544 182.326 259.518 181.993 259.493 cv
368.721 259.427 mo
368.391 259.452 368.06 259.478 367.729 259.503 cv
367.806 260.5 li
368.137 260.475 368.468 260.449 368.799 260.424 cv
368.799 260.424 li
368.721 259.427 li
179.991 259.337 mo
179.913 260.334 li
180.247 260.36 180.58 260.386 180.914 260.412 cv
180.992 259.415 li
180.658 259.389 180.325 259.363 179.991 259.337 cv
370.714 259.27 mo
370.382 259.297 370.05 259.323 369.718 259.349 cv
369.796 260.346 li
370.129 260.32 370.461 260.293 370.793 260.267 cv
370.714 259.27 li
177.99 259.177 mo
177.91 260.174 li
178.243 260.201 178.577 260.228 178.911 260.254 cv
178.991 259.257 li
178.657 259.231 178.324 259.204 177.99 259.177 cv
372.707 259.11 mo
372.375 259.137 372.043 259.164 371.71 259.19 cv
371.791 260.187 li
372.123 260.161 372.455 260.134 372.788 260.107 cv
372.707 259.11 li
175.989 259.014 mo
175.907 260.01 li
176.24 260.038 176.574 260.065 176.908 260.093 cv
176.989 259.096 li
176.656 259.069 176.322 259.041 175.989 259.014 cv
374.699 258.946 mo
374.367 258.974 374.035 259.001 373.703 259.029 cv
373.785 260.025 li
374.117 259.998 374.449 259.971 374.782 259.943 cv
374.699 258.946 li
173.988 258.847 mo
173.904 259.843 li
174.237 259.872 174.571 259.9 174.905 259.927 cv
174.988 258.931 li
174.654 258.903 174.321 258.875 173.988 258.847 cv
376.691 258.779 mo
376.359 258.807 376.027 258.835 375.695 258.863 cv
375.778 259.86 li
376.111 259.832 376.443 259.804 376.775 259.776 cv
376.691 258.779 li
566.148 258.42 mo
565.441 259.128 li
566.148 259.834 li
566.855 259.127 li
566.148 258.42 li
171.987 258.676 mo
171.901 259.673 li
172.235 259.701 172.568 259.73 172.902 259.758 cv
172.987 258.762 li
172.653 258.734 172.32 258.705 171.987 258.676 cv
378.682 258.608 mo
378.35 258.637 378.018 258.666 377.686 258.694 cv
377.772 259.691 li
378.104 259.662 378.436 259.633 378.768 259.605 cv
378.682 258.608 li
169.986 258.502 mo
169.898 259.498 li
170.232 259.528 170.566 259.557 170.9 259.586 cv
170.986 258.59 li
170.653 258.561 170.319 258.531 169.986 258.502 cv
380.673 258.434 mo
380.342 258.463 380.01 258.492 379.678 258.522 cv
379.765 259.518 li
380.097 259.489 380.429 259.459 380.761 259.43 cv
380.673 258.434 li
167.994 258.325 mo
167.905 259.321 li
168.237 259.351 168.569 259.38 168.901 259.41 cv
168.99 258.414 li
168.658 258.384 168.326 258.355 167.994 258.325 cv
382.664 258.256 mo
382.332 258.286 382.001 258.316 381.669 258.345 cv
381.758 259.341 li
382.09 259.312 382.422 259.282 382.754 259.252 cv
382.664 258.256 li
166.003 258.144 mo
165.912 259.14 li
166.244 259.17 166.576 259.201 166.908 259.231 cv
166.999 258.235 li
166.667 258.205 166.335 258.175 166.003 258.144 cv
384.655 258.074 mo
384.323 258.105 383.991 258.135 383.659 258.166 cv
383.75 259.161 li
384.083 259.131 384.415 259.101 384.746 259.07 cv
384.655 258.074 li
164.013 257.96 mo
163.919 258.955 li
164.251 258.986 164.583 259.017 164.916 259.048 cv
165.008 258.052 li
164.676 258.022 164.344 257.991 164.013 257.96 cv
386.645 257.889 mo
386.313 257.92 385.982 257.951 385.65 257.982 cv
385.742 258.978 li
386.075 258.947 386.407 258.916 386.739 258.884 cv
386.645 257.889 li
162.022 257.772 mo
161.927 258.767 li
162.259 258.799 162.591 258.83 162.923 258.862 cv
163.017 257.866 li
162.685 257.835 162.354 257.803 162.022 257.772 cv
388.635 257.7 mo
388.303 257.732 387.972 257.763 387.64 257.795 cv
387.734 258.79 li
388.067 258.759 388.398 258.727 388.73 258.695 cv
388.635 257.7 li
160.032 257.58 mo
159.935 258.575 li
160.267 258.607 160.599 258.639 160.931 258.672 cv
161.027 257.676 li
160.695 257.644 160.364 257.612 160.032 257.58 cv
390.624 257.507 mo
390.293 257.539 389.961 257.572 389.629 257.604 cv
389.726 258.599 li
390.058 258.567 390.39 258.535 390.721 258.502 cv
390.624 257.507 li
158.042 257.384 mo
157.944 258.379 li
158.275 258.412 158.607 258.445 158.939 258.478 cv
159.037 257.482 li
158.705 257.45 158.374 257.417 158.042 257.384 cv
564.733 257.007 mo
564.026 257.714 li
564.734 258.421 li
565.44 257.713 li
564.733 257.007 li
392.613 257.31 mo
392.282 257.344 391.95 257.376 391.619 257.409 cv
391.717 258.404 li
392.049 258.371 392.381 258.339 392.713 258.306 cv
392.613 257.31 li
156.053 257.185 mo
155.952 258.18 li
156.284 258.213 156.616 258.247 156.948 258.28 cv
157.048 257.285 li
156.716 257.252 156.385 257.218 156.053 257.185 cv
394.602 257.11 mo
394.271 257.144 393.939 257.177 393.608 257.211 cv
393.708 258.206 li
394.04 258.172 394.372 258.139 394.703 258.105 cv
394.703 258.105 li
394.602 257.11 li
154.064 256.981 mo
153.961 257.976 li
154.293 258.01 154.625 258.044 154.957 258.078 cv
154.957 258.078 li
155.059 257.083 li
154.727 257.05 154.395 257.016 154.064 256.981 cv
396.59 256.906 mo
396.259 256.94 395.928 256.975 395.596 257.009 cv
395.698 258.003 li
396.03 257.969 396.362 257.935 396.693 257.901 cv
396.59 256.906 li
12.2556 223.906 mo
11.9545 224.86 li
21.0033 227.717 30.6353 230.424 40.8019 232.967 cv
107.894 249.749 191.541 258 274.879 258.001 cv
371.581 258 467.858 246.892 537.372 225.072 cv
537.072 224.118 li
467.717 245.892 371.514 257.001 274.897 257.001 cv
274.891 257.001 274.884 257.001 274.879 257.001 cv
191.608 257.002 108.024 248.752 41.0446 231.997 cv
30.8957 229.458 21.2831 226.756 12.2556 223.906 cv
152.076 256.774 mo
151.971 257.769 li
152.303 257.804 152.635 257.838 152.966 257.873 cv
153.07 256.878 li
152.738 256.844 152.407 256.809 152.076 256.774 cv
398.578 256.698 mo
398.247 256.733 397.916 256.768 397.584 256.803 cv
397.688 257.797 li
398.02 257.763 398.352 257.728 398.683 257.693 cv
398.578 256.698 li
150.088 256.564 mo
149.981 257.558 li
150.313 257.593 150.644 257.629 150.976 257.664 cv
151.082 256.669 li
150.75 256.634 150.419 256.599 150.088 256.564 cv
400.566 256.487 mo
400.235 256.522 399.904 256.558 399.572 256.593 cv
399.678 257.587 li
400.01 257.552 400.341 257.517 400.673 257.481 cv
400.566 256.487 li
148.1 256.349 mo
147.992 257.343 li
148.323 257.379 148.655 257.415 148.986 257.451 cv
149.094 256.457 li
148.762 256.421 148.431 256.385 148.1 256.349 cv
402.553 256.271 mo
402.222 256.307 401.891 256.343 401.56 256.379 cv
401.667 257.373 li
401.999 257.337 402.331 257.301 402.662 257.265 cv
402.662 257.265 li
402.553 256.271 li
146.113 256.13 mo
146.002 257.124 li
146.334 257.161 146.665 257.198 146.997 257.234 cv
147.106 256.24 li
146.775 256.204 146.444 256.167 146.113 256.13 cv
404.54 256.052 mo
404.209 256.089 403.878 256.125 403.547 256.162 cv
403.656 257.156 li
403.988 257.119 404.319 257.082 404.65 257.045 cv
404.54 256.052 li
144.126 255.908 mo
144.014 256.901 li
144.345 256.939 144.676 256.976 145.008 257.013 cv
145.119 256.019 li
144.788 255.982 144.457 255.945 144.126 255.908 cv
563.318 255.593 mo
562.612 256.3 li
563.319 257.007 li
564.026 256.3 li
563.318 255.593 li
406.526 255.828 mo
406.195 255.866 405.864 255.903 405.533 255.941 cv
405.645 256.934 li
405.976 256.897 406.308 256.86 406.639 256.822 cv
406.526 255.828 li
142.14 255.681 mo
142.025 256.675 li
142.357 256.713 142.688 256.751 143.02 256.789 cv
143.133 255.795 li
142.801 255.757 142.471 255.719 142.14 255.681 cv
408.512 255.601 mo
408.181 255.639 407.85 255.677 407.519 255.715 cv
407.633 256.709 li
407.964 256.671 408.296 256.633 408.627 256.594 cv
408.512 255.601 li
140.154 255.451 mo
140.038 256.444 li
140.369 256.483 140.7 256.521 141.032 256.56 cv
141.147 255.567 li
140.816 255.528 140.485 255.49 140.154 255.451 cv
410.497 255.37 mo
410.167 255.409 409.836 255.448 409.505 255.486 cv
409.62 256.479 li
409.952 256.441 410.283 256.402 410.614 256.363 cv
410.497 255.37 li
138.169 255.216 mo
138.05 256.209 li
138.381 256.249 138.713 256.288 139.044 256.327 cv
139.161 255.334 li
138.83 255.295 138.499 255.256 138.169 255.216 cv
412.482 255.135 mo
412.152 255.174 411.821 255.214 411.49 255.253 cv
411.608 256.246 li
411.939 256.207 412.27 256.167 412.601 256.128 cv
412.482 255.135 li
136.184 254.978 mo
136.063 255.971 li
136.394 256.011 136.726 256.051 137.057 256.091 cv
137.176 255.098 li
136.845 255.058 136.514 255.018 136.184 254.978 cv
414.467 254.896 mo
414.136 254.936 413.806 254.976 413.475 255.016 cv
413.594 256.009 li
413.926 255.969 414.257 255.928 414.587 255.888 cv
414.467 254.896 li
134.199 254.736 mo
134.077 255.728 li
134.408 255.769 134.739 255.809 135.07 255.85 cv
135.191 254.857 li
134.86 254.817 134.53 254.776 134.199 254.736 cv
416.451 254.652 mo
416.12 254.693 415.79 254.734 415.459 254.775 cv
415.58 255.767 li
415.912 255.726 416.243 255.686 416.573 255.645 cv
416.573 255.645 li
416.451 254.652 li
132.215 254.489 mo
132.091 255.481 li
132.422 255.523 132.753 255.564 133.084 255.605 cv
133.207 254.613 li
132.877 254.572 132.546 254.53 132.215 254.489 cv
561.904 254.179 mo
561.197 254.886 li
561.904 255.593 li
562.611 254.886 li
561.904 254.179 li
418.434 254.405 mo
418.104 254.447 417.773 254.488 417.443 254.529 cv
417.566 255.522 li
417.897 255.48 418.228 255.439 418.559 255.397 cv
418.434 254.405 li
130.232 254.238 mo
130.106 255.23 li
130.436 255.273 130.767 255.315 131.098 255.356 cv
131.224 254.364 li
130.893 254.323 130.562 254.281 130.232 254.238 cv
420.417 254.154 mo
420.087 254.196 419.756 254.238 419.426 254.28 cv
419.551 255.272 li
419.883 255.23 420.213 255.188 420.544 255.146 cv
420.417 254.154 li
128.249 253.984 mo
128.121 254.975 li
128.451 255.018 128.782 255.061 129.113 255.103 cv
129.241 254.112 li
128.91 254.069 128.579 254.026 128.249 253.984 cv
422.4 253.898 mo
422.069 253.941 421.739 253.984 421.408 254.026 cv
421.536 255.018 li
421.867 254.976 422.198 254.933 422.528 254.89 cv
422.4 253.898 li
126.267 253.725 mo
126.136 254.716 li
126.467 254.76 126.798 254.803 127.128 254.846 cv
127.258 253.855 li
126.927 253.812 126.597 253.768 126.267 253.725 cv
424.381 253.639 mo
424.051 253.682 423.721 253.726 423.39 253.769 cv
423.52 254.76 li
423.851 254.717 424.182 254.674 424.512 254.63 cv
424.381 253.639 li
124.285 253.462 mo
124.152 254.453 li
124.483 254.497 124.813 254.541 125.144 254.585 cv
125.276 253.594 li
124.945 253.55 124.615 253.506 124.285 253.462 cv
426.363 253.375 mo
426.033 253.419 425.702 253.463 425.372 253.507 cv
425.504 254.499 li
425.835 254.454 426.165 254.41 426.496 254.366 cv
426.363 253.375 li
122.304 253.194 mo
122.169 254.185 li
122.5 254.23 122.83 254.275 123.161 254.319 cv
123.294 253.328 li
122.964 253.284 122.634 253.239 122.304 253.194 cv
428.343 253.107 mo
428.013 253.152 427.683 253.196 427.353 253.241 cv
427.487 254.232 li
427.818 254.187 428.148 254.143 428.479 254.097 cv
428.343 253.107 li
560.489 252.765 mo
559.782 253.473 li
560.49 254.18 li
561.196 253.472 li
560.489 252.765 li
120.323 252.923 mo
120.187 253.913 li
120.517 253.959 120.847 254.004 121.178 254.05 cv
121.314 253.059 li
120.983 253.014 120.653 252.968 120.323 252.923 cv
430.323 252.834 mo
429.994 252.88 429.664 252.926 429.333 252.971 cv
429.47 253.962 li
429.8 253.916 430.131 253.871 430.461 253.825 cv
430.323 252.834 li
118.344 252.647 mo
118.204 253.637 li
118.535 253.683 118.865 253.73 119.195 253.776 cv
119.333 252.785 li
119.003 252.739 118.673 252.693 118.344 252.647 cv
432.303 252.558 mo
431.973 252.604 431.643 252.65 431.313 252.696 cv
431.452 253.687 li
431.782 253.641 432.112 253.594 432.442 253.548 cv
432.443 253.548 li
432.303 252.558 li
116.364 252.366 mo
116.223 253.356 li
116.553 253.403 116.883 253.45 117.214 253.497 cv
117.354 252.507 li
117.024 252.46 116.694 252.413 116.364 252.366 cv
434.282 252.277 mo
433.952 252.324 433.622 252.371 433.293 252.418 cv
433.433 253.408 li
433.763 253.361 434.094 253.314 434.423 253.267 cv
434.282 252.277 li
114.386 252.082 mo
114.242 253.071 li
114.572 253.119 114.902 253.167 115.232 253.214 cv
115.375 252.225 li
115.045 252.177 114.715 252.13 114.386 252.082 cv
436.26 251.991 mo
435.931 252.039 435.601 252.087 435.271 252.134 cv
435.414 253.124 li
435.744 253.077 436.074 253.029 436.404 252.981 cv
436.26 251.991 li
112.407 251.793 mo
112.262 252.782 li
112.592 252.831 112.922 252.879 113.252 252.927 cv
113.396 251.938 li
113.067 251.89 112.737 251.841 112.407 251.793 cv
438.238 251.702 mo
437.908 251.75 437.579 251.799 437.249 251.847 cv
437.394 252.836 li
437.724 252.788 438.054 252.739 438.384 252.691 cv
438.238 251.702 li
559.074 251.352 mo
558.367 252.059 li
559.075 252.766 li
559.782 252.059 li
559.074 251.352 li
110.43 251.499 mo
110.282 252.488 li
110.612 252.538 110.942 252.587 111.272 252.636 cv
111.419 251.647 li
111.089 251.598 110.76 251.549 110.43 251.499 cv
440.215 251.407 mo
439.885 251.457 439.556 251.506 439.226 251.555 cv
439.374 252.544 li
439.704 252.495 440.033 252.446 440.363 252.396 cv
440.215 251.407 li
108.453 251.201 mo
108.303 252.19 li
108.633 252.24 108.963 252.29 109.293 252.34 cv
109.442 251.351 li
109.112 251.301 108.783 251.251 108.453 251.201 cv
442.191 251.109 mo
441.862 251.159 441.532 251.209 441.203 251.259 cv
441.352 252.247 li
441.682 252.197 442.012 252.147 442.341 252.097 cv
442.191 251.109 li
106.478 250.899 mo
106.325 251.887 li
106.654 251.938 106.984 251.989 107.314 252.039 cv
107.314 252.039 li
107.465 251.051 li
107.136 251 106.806 250.95 106.478 250.899 cv
444.167 250.806 mo
443.837 250.856 443.508 250.907 443.179 250.958 cv
443.331 251.946 li
443.66 251.895 443.99 251.845 444.319 251.794 cv
444.167 250.806 li
104.502 250.592 mo
104.347 251.58 li
104.677 251.631 105.006 251.683 105.336 251.734 cv
105.49 250.746 li
105.16 250.695 104.831 250.644 104.502 250.592 cv
446.141 250.498 mo
445.813 250.549 445.483 250.601 445.154 250.652 cv
445.308 251.64 li
445.638 251.589 445.967 251.537 446.297 251.486 cv
446.141 250.498 li
102.528 250.28 mo
102.371 251.268 li
102.7 251.32 103.029 251.372 103.359 251.424 cv
103.515 250.437 li
103.186 250.385 102.856 250.333 102.528 250.28 cv
557.66 249.938 mo
556.953 250.645 li
557.66 251.352 li
558.367 250.645 li
557.66 249.938 li
448.116 250.185 mo
447.787 250.238 447.458 250.29 447.129 250.342 cv
447.285 251.33 li
447.614 251.278 447.944 251.225 448.273 251.173 cv
448.116 250.185 li
100.554 249.964 mo
100.395 250.951 li
100.724 251.004 101.053 251.057 101.382 251.11 cv
101.541 250.123 li
101.212 250.07 100.883 250.017 100.554 249.964 cv
450.089 249.868 mo
449.76 249.921 449.431 249.974 449.102 250.027 cv
449.261 251.015 li
449.591 250.962 449.92 250.909 450.249 250.855 cv
450.089 249.868 li
98.5808 249.643 mo
98.4191 250.63 li
98.7482 250.684 99.0773 250.738 99.4067 250.791 cv
99.5673 249.804 li
99.2382 249.751 98.9094 249.697 98.5808 249.643 cv
452.062 249.546 mo
451.733 249.6 451.404 249.654 451.075 249.708 cv
451.236 250.695 li
451.566 250.641 451.895 250.587 452.224 250.533 cv
452.062 249.546 li
96.6087 249.317 mo
96.4445 250.304 li
96.7735 250.359 97.1024 250.413 97.4317 250.467 cv
97.4318 250.467 li
97.5947 249.481 li
97.2656 249.427 96.937 249.372 96.6087 249.317 cv
454.033 249.22 mo
453.705 249.275 453.376 249.329 453.048 249.384 cv
453.211 250.37 li
453.54 250.316 453.869 250.261 454.198 250.206 cv
454.033 249.22 li
94.6372 248.987 mo
94.4706 249.973 li
94.7996 250.029 95.1283 250.084 95.4576 250.139 cv
95.6228 249.153 li
95.294 249.098 94.9656 249.042 94.6372 248.987 cv
456.004 248.889 mo
455.676 248.944 455.348 249 455.019 249.055 cv
455.185 250.041 li
455.514 249.986 455.843 249.93 456.171 249.875 cv
456.004 248.889 li
556.245 248.524 mo
555.538 249.232 li
556.245 249.939 li
556.952 249.231 li
556.245 248.524 li
92.6667 248.652 mo
92.4976 249.637 li
92.8262 249.694 93.155 249.75 93.4841 249.806 cv
93.6518 248.82 li
93.3232 248.764 92.9947 248.708 92.6667 248.652 cv
457.975 248.552 mo
457.647 248.609 457.318 248.665 456.99 248.721 cv
457.158 249.707 li
457.487 249.651 457.815 249.594 458.144 249.538 cv
457.975 248.552 li
90.6969 248.312 mo
90.5255 249.297 li
90.854 249.354 91.1825 249.411 91.5114 249.468 cv
91.6816 248.482 li
91.3531 248.425 91.0249 248.369 90.6969 248.312 cv
459.944 248.211 mo
459.616 248.269 459.288 248.326 458.959 248.383 cv
459.13 249.368 li
459.459 249.311 459.787 249.254 460.116 249.196 cv
459.944 248.211 li
88.7279 247.967 mo
88.5541 248.951 li
88.8825 249.009 89.2109 249.067 89.5396 249.125 cv
89.7123 248.14 li
89.3839 248.082 89.0558 248.024 88.7279 247.967 cv
461.912 247.865 mo
461.585 247.923 461.257 247.981 460.928 248.039 cv
461.101 249.024 li
461.43 248.966 461.759 248.908 462.087 248.85 cv
461.912 247.865 li
86.76 247.617 mo
86.5835 248.601 li
86.9117 248.66 87.2402 248.718 87.5688 248.777 cv
87.7439 247.792 li
87.4156 247.734 87.0877 247.675 86.76 247.617 cv
463.88 247.514 mo
463.552 247.573 463.224 247.632 462.896 247.691 cv
463.072 248.675 li
463.4 248.616 463.729 248.558 464.057 248.499 cv
463.88 247.514 li
554.83 247.111 mo
554.123 247.818 li
554.831 248.525 li
555.537 247.818 li
554.83 247.111 li
84.793 247.261 mo
84.6141 248.245 li
84.9421 248.305 85.2702 248.364 85.5987 248.424 cv
85.7764 247.44 li
85.4482 247.38 85.1205 247.321 84.793 247.261 cv
465.847 247.158 mo
465.519 247.218 465.191 247.278 464.863 247.337 cv
465.042 248.321 li
465.37 248.262 465.698 248.202 466.026 248.142 cv
465.847 247.158 li
82.8269 246.901 mo
82.6454 247.885 li
82.9732 247.945 83.3012 248.006 83.6296 248.066 cv
83.8097 247.082 li
83.4818 247.022 83.1541 246.962 82.8269 246.901 cv
467.812 246.797 mo
467.485 246.858 467.158 246.918 466.83 246.978 cv
467.01 247.962 li
467.339 247.902 467.667 247.841 467.994 247.781 cv
467.812 246.797 li
80.8617 246.536 mo
80.6776 247.519 li
81.0053 247.58 81.3332 247.642 81.6615 247.703 cv
81.8441 246.719 li
81.5164 246.658 81.1888 246.597 80.8617 246.536 cv
469.777 246.431 mo
469.45 246.492 469.123 246.554 468.795 246.615 cv
468.978 247.598 li
469.306 247.537 469.634 247.475 469.962 247.414 cv
469.777 246.431 li
78.8975 246.166 mo
78.7109 247.148 li
79.0384 247.21 79.3661 247.272 79.6942 247.334 cv
79.8795 246.352 li
79.5518 246.29 79.2246 246.228 78.8975 246.166 cv
471.741 246.059 mo
471.414 246.122 471.087 246.184 470.759 246.246 cv
470.945 247.228 li
471.273 247.166 471.601 247.104 471.928 247.042 cv
471.741 246.059 li
553.415 245.697 mo
552.708 246.404 li
553.416 247.111 li
554.123 246.404 li
553.415 245.697 li
76.9343 245.79 mo
76.7451 246.772 li
77.0723 246.835 77.3999 246.898 77.7279 246.961 cv
77.9157 245.979 li
77.5883 245.916 77.2613 245.853 76.9343 245.79 cv
473.704 245.682 mo
473.377 245.746 473.05 245.809 472.723 245.871 cv
472.911 246.854 li
473.239 246.791 473.566 246.727 473.894 246.664 cv
473.704 245.682 li
74.9722 245.409 mo
74.7803 246.391 li
75.1075 246.455 75.4349 246.518 75.7626 246.582 cv
75.9532 245.6 li
75.6258 245.537 75.2989 245.473 74.9722 245.409 cv
475.665 245.3 mo
475.339 245.364 475.012 245.428 474.685 245.492 cv
474.876 246.474 li
475.204 246.41 475.531 246.346 475.858 246.282 cv
475.665 245.3 li
73.0112 245.023 mo
72.8165 246.004 li
73.1436 246.069 73.4708 246.133 73.7982 246.198 cv
73.7984 246.198 li
73.9916 245.217 li
73.6645 245.152 73.3377 245.088 73.0112 245.023 cv
477.626 244.913 mo
477.3 244.978 476.973 245.043 476.646 245.107 cv
476.84 246.088 li
477.167 246.023 477.495 245.958 477.821 245.893 cv
477.626 244.913 li
71.0511 244.631 mo
70.8538 245.612 li
71.1807 245.677 71.5076 245.743 71.835 245.808 cv
72.031 244.828 li
71.7041 244.762 71.3774 244.697 71.0511 244.631 cv
552.001 244.283 mo
551.294 244.991 li
552.001 245.697 li
552.708 244.99 li
552.001 244.283 li
479.586 244.52 mo
479.259 244.586 478.933 244.651 478.606 244.717 cv
478.803 245.697 li
479.13 245.632 479.457 245.566 479.784 245.5 cv
479.586 244.52 li
69.0923 244.234 mo
68.8921 245.214 li
69.2188 245.281 69.5456 245.347 69.8728 245.413 cv
70.0715 244.433 li
69.7448 244.367 69.4183 244.301 69.0923 244.234 cv
481.544 244.121 mo
481.218 244.188 480.892 244.254 480.565 244.321 cv
480.764 245.301 li
481.092 245.234 481.418 245.167 481.745 245.101 cv
481.544 244.121 li
67.1345 243.831 mo
66.9316 244.811 li
67.2581 244.878 67.5847 244.946 67.9118 245.013 cv
68.1133 244.033 li
67.7867 243.966 67.4605 243.899 67.1345 243.831 cv
483.501 243.717 mo
483.175 243.785 482.849 243.852 482.523 243.92 cv
482.725 244.899 li
483.052 244.831 483.379 244.764 483.705 244.696 cv
483.705 244.696 li
483.501 243.717 li
65.1781 243.423 mo
64.9723 244.402 li
65.2986 244.47 65.6251 244.539 65.9519 244.607 cv
66.1561 243.628 li
65.8298 243.56 65.5038 243.492 65.1781 243.423 cv
485.457 243.307 mo
485.131 243.376 484.806 243.444 484.479 243.512 cv
484.685 244.491 li
485.011 244.423 485.338 244.354 485.664 244.285 cv
485.457 243.307 li
550.586 242.87 mo
549.879 243.577 li
550.586 244.284 li
551.293 243.576 li
550.586 242.87 li
63.2228 243.009 mo
63.0142 243.987 li
63.34 244.057 63.6664 244.126 63.9931 244.195 cv
64.2002 243.217 li
63.874 243.148 63.5482 243.079 63.2228 243.009 cv
487.412 242.891 mo
487.086 242.961 486.761 243.03 486.435 243.1 cv
486.643 244.078 li
486.97 244.008 487.296 243.939 487.622 243.869 cv
487.412 242.891 li
61.2685 242.589 mo
61.0572 243.567 li
61.383 243.637 61.709 243.708 62.0355 243.778 cv
62.2455 242.8 li
61.9195 242.73 61.5939 242.66 61.2685 242.589 cv
489.366 242.47 mo
489.04 242.54 488.715 242.611 488.389 242.681 cv
488.6 243.659 li
488.926 243.588 489.252 243.518 489.578 243.447 cv
489.366 242.47 li
59.3158 242.164 mo
59.1014 243.141 li
59.4271 243.212 59.7529 243.283 60.0791 243.354 cv
60.292 242.377 li
59.9663 242.306 59.6409 242.235 59.3158 242.164 cv
491.318 242.042 mo
490.993 242.114 490.668 242.185 490.342 242.257 cv
490.556 243.234 li
490.882 243.162 491.208 243.09 491.533 243.019 cv
491.318 242.042 li
57.3643 241.732 mo
57.147 242.709 li
57.4724 242.781 57.7979 242.853 58.1241 242.925 cv
58.3399 241.949 li
58.0143 241.877 57.6893 241.805 57.3643 241.732 cv
549.171 241.456 mo
548.464 242.163 li
549.172 242.87 li
549.879 242.163 li
549.171 241.456 li
493.269 241.609 mo
492.944 241.681 492.619 241.754 492.294 241.826 cv
492.51 242.802 li
492.836 242.73 493.162 242.657 493.487 242.585 cv
493.269 241.609 li
55.4142 241.295 mo
55.1938 242.271 li
55.519 242.344 55.8444 242.417 56.1703 242.49 cv
56.389 241.515 li
56.0638 241.442 55.7388 241.368 55.4142 241.295 cv
495.218 241.169 mo
494.894 241.243 494.569 241.316 494.244 241.39 cv
494.464 242.365 li
494.789 242.292 495.115 242.218 495.44 242.145 cv
495.218 241.169 li
53.4655 240.852 mo
53.242 241.826 li
53.5671 241.901 53.8922 241.975 54.2177 242.049 cv
54.4397 241.074 li
54.1145 241 53.7898 240.926 53.4655 240.852 cv
497.166 240.724 mo
496.842 240.798 496.517 240.873 496.192 240.947 cv
496.416 241.922 li
496.741 241.848 497.066 241.773 497.391 241.698 cv
497.166 240.724 li
51.518 240.402 mo
51.2916 241.376 li
51.6162 241.452 51.9412 241.527 52.2666 241.602 cv
52.4916 240.628 li
52.1667 240.553 51.8422 240.478 51.518 240.402 cv
499.113 240.272 mo
498.789 240.348 498.465 240.423 498.14 240.498 cv
498.366 241.473 li
498.691 241.397 499.016 241.321 499.341 241.245 cv
499.341 241.245 li
499.113 240.272 li
547.756 240.042 mo
547.05 240.75 li
547.757 241.456 li
548.464 240.749 li
547.756 240.042 li
49.5722 239.946 mo
49.3426 240.92 li
49.6671 240.996 49.9917 241.073 50.3169 241.149 cv
50.5449 240.175 li
50.2202 240.099 49.8961 240.023 49.5722 239.946 cv
501.058 239.814 mo
500.734 239.891 500.41 239.967 500.086 240.043 cv
500.315 241.017 li
500.64 240.94 500.965 240.863 501.289 240.787 cv
501.058 239.814 li
47.6278 239.485 mo
47.3951 240.457 li
47.7193 240.535 48.0437 240.612 48.3687 240.689 cv
48.5999 239.716 li
48.2754 239.639 47.9514 239.562 47.6278 239.485 cv
503.002 239.349 mo
502.678 239.427 502.354 239.505 502.03 239.582 cv
502.263 240.555 li
502.587 240.477 502.912 240.399 503.236 240.321 cv
503.002 239.349 li
45.6812 239.015 mo
45.4453 239.987 li
45.7705 240.066 46.0959 240.145 46.4218 240.223 cv
46.6562 239.251 li
46.3308 239.173 46.0059 239.094 45.6812 239.015 cv
504.944 238.878 mo
504.62 238.957 504.297 239.036 503.973 239.114 cv
504.209 240.086 li
504.533 240.007 504.857 239.928 505.181 239.849 cv
504.944 238.878 li
546.342 238.628 mo
545.635 239.336 li
546.342 240.043 li
547.049 239.335 li
546.342 238.628 li
43.7353 238.539 mo
43.4961 239.51 li
43.8204 239.59 44.1449 239.67 44.47 239.749 cv
44.7076 238.778 li
44.3832 238.699 44.059 238.619 43.7353 238.539 cv
506.884 238.4 mo
506.561 238.48 506.238 238.56 505.914 238.64 cv
506.153 239.611 li
506.477 239.531 506.801 239.451 507.125 239.371 cv
506.884 238.4 li
41.7947 238.058 mo
41.5523 239.028 li
41.8757 239.109 42.1993 239.189 42.5234 239.27 cv
42.5236 239.27 li
42.7645 238.299 li
42.4408 238.219 42.1175 238.138 41.7947 238.058 cv
508.823 237.916 mo
508.5 237.997 508.177 238.078 507.853 238.159 cv
508.096 239.129 li
508.42 239.048 508.744 238.967 509.067 238.885 cv
508.823 237.916 li
39.8541 237.569 mo
39.6082 238.538 li
39.9316 238.62 40.2555 238.702 40.5801 238.784 cv
40.8242 237.814 li
40.5003 237.733 40.1769 237.651 39.8541 237.569 cv
510.759 237.424 mo
510.437 237.507 510.114 237.589 509.791 237.671 cv
510.037 238.64 li
510.361 238.558 510.684 238.476 511.007 238.393 cv
510.759 237.424 li
544.927 237.215 mo
544.22 237.922 li
544.928 238.629 li
545.634 237.922 li
544.927 237.215 li
37.9153 237.073 mo
37.6658 238.042 li
37.9889 238.125 38.3126 238.208 38.6368 238.291 cv
38.8844 237.322 li
38.5608 237.239 38.2378 237.156 37.9153 237.073 cv
512.694 236.926 mo
512.372 237.01 512.05 237.093 511.727 237.176 cv
511.977 238.145 li
512.3 238.061 512.623 237.978 512.946 237.894 cv
512.694 236.926 li
35.9781 236.571 mo
35.7251 237.538 li
36.0479 237.623 36.3713 237.707 36.6953 237.791 cv
36.6953 237.791 li
36.9464 236.823 li
36.623 236.739 36.3003 236.655 35.9781 236.571 cv
514.628 236.421 mo
514.306 236.506 513.984 236.59 513.661 236.674 cv
513.914 237.642 li
514.237 237.558 514.56 237.473 514.882 237.388 cv
514.628 236.421 li
34.0429 236.061 mo
33.7864 237.027 li
34.1088 237.113 34.4319 237.198 34.7555 237.284 cv
35.0103 236.317 li
34.6872 236.231 34.3648 236.146 34.0429 236.061 cv
543.512 235.801 mo
542.805 236.508 li
543.513 237.215 li
544.22 236.508 li
543.512 235.801 li
516.559 235.909 mo
516.238 235.995 515.916 236.08 515.594 236.166 cv
515.85 237.132 li
516.173 237.047 516.495 236.961 516.817 236.875 cv
516.559 235.909 li
32.1097 235.544 mo
31.8495 236.509 li
32.1715 236.596 32.4943 236.683 32.8177 236.769 cv
33.0761 235.803 li
32.7533 235.717 32.4311 235.63 32.1097 235.544 cv
518.489 235.389 mo
518.167 235.476 517.846 235.563 517.524 235.65 cv
517.784 236.615 li
518.107 236.528 518.429 236.441 518.75 236.354 cv
518.75 236.354 li
518.489 235.389 li
30.1784 235.019 mo
29.9144 235.984 li
30.2363 236.072 30.5586 236.16 30.8817 236.247 cv
31.1438 235.282 li
30.8213 235.195 30.4996 235.107 30.1784 235.019 cv
520.416 234.862 mo
520.095 234.95 519.774 235.039 519.452 235.126 cv
519.716 236.091 li
520.038 236.003 520.36 235.915 520.681 235.826 cv
520.416 234.862 li
542.098 234.387 mo
541.391 235.095 li
542.098 235.802 li
542.805 235.094 li
542.098 234.387 li
28.2493 234.487 mo
27.9814 235.451 li
28.303 235.54 28.625 235.629 28.9478 235.718 cv
29.2135 234.754 li
28.8915 234.665 28.5701 234.576 28.2493 234.487 cv
522.341 234.327 mo
522.021 234.417 521.7 234.507 521.379 234.596 cv
521.646 235.559 li
521.968 235.47 522.289 235.38 522.61 235.291 cv
522.341 234.327 li
26.3223 233.947 mo
26.0507 234.91 li
26.3718 235 26.6935 235.091 27.0158 235.181 cv
27.2854 234.218 li
26.9637 234.128 26.6428 234.038 26.3223 233.947 cv
524.264 233.786 mo
523.944 233.876 523.624 233.967 523.303 234.057 cv
523.574 235.02 li
523.896 234.929 524.217 234.838 524.537 234.747 cv
524.264 233.786 li
24.3975 233.4 mo
24.1219 234.361 li
24.4426 234.453 24.764 234.545 25.086 234.636 cv
25.3596 233.675 li
25.0382 233.583 24.7176 233.492 24.3975 233.4 cv
526.185 233.236 mo
525.865 233.328 525.545 233.42 525.225 233.511 cv
525.5 234.473 li
525.821 234.381 526.142 234.289 526.462 234.196 cv
526.462 234.196 li
526.185 233.236 li
540.683 232.974 mo
539.976 233.681 li
540.683 234.388 li
541.39 233.681 li
540.683 232.974 li
22.4751 232.844 mo
22.1955 233.805 li
22.5158 233.898 22.8368 233.991 23.1583 234.084 cv
23.4359 233.123 li
23.115 233.03 22.7947 232.938 22.4751 232.844 cv
528.103 232.678 mo
527.784 232.771 527.464 232.865 527.144 232.958 cv
527.424 233.918 li
527.744 233.825 528.065 233.731 528.385 233.637 cv
528.103 232.678 li
20.555 232.281 mo
20.2712 233.24 li
20.5912 233.334 20.9117 233.429 21.2331 233.523 cv
21.5147 232.564 li
21.1941 232.47 20.8742 232.375 20.555 232.281 cv
530.019 232.112 mo
529.7 232.207 529.381 232.301 529.062 232.396 cv
529.345 233.355 li
529.665 233.26 529.985 233.165 530.305 233.07 cv
530.305 233.07 li
530.019 232.112 li
539.268 231.56 mo
538.561 232.267 li
539.269 232.974 li
539.975 232.267 li
539.268 231.56 li
18.6375 231.709 mo
18.3496 232.667 li
18.6691 232.763 18.9893 232.859 19.3101 232.954 cv
19.5958 231.996 li
19.2757 231.9 18.9563 231.805 18.6375 231.709 cv
531.933 231.538 mo
531.615 231.634 531.296 231.73 530.977 231.826 cv
531.264 232.784 li
531.584 232.688 531.903 232.592 532.223 232.495 cv
531.933 231.538 li
16.7224 231.129 mo
16.4302 232.085 li
16.7493 232.182 17.0692 232.28 17.3897 232.377 cv
17.6795 231.42 li
17.3598 231.323 17.0407 231.226 16.7224 231.129 cv
533.844 230.956 mo
533.526 231.053 533.208 231.151 532.889 231.248 cv
533.18 232.204 li
533.5 232.107 533.819 232.009 534.138 231.912 cv
533.844 230.956 li
14.8101 230.54 mo
14.5136 231.495 li
14.8323 231.594 15.1515 231.692 15.4717 231.791 cv
15.7659 230.835 li
15.4466 230.737 15.128 230.638 14.8101 230.54 cv
535.752 230.365 mo
535.435 230.464 535.117 230.563 534.799 230.661 cv
535.094 231.617 li
535.414 231.518 535.732 231.419 536.05 231.319 cv
535.752 230.365 li
537.239 230.946 mo
537.854 231.561 li
538.561 230.853 li
537.853 230.146 li
537.797 230.203 li
537.658 229.765 li
537.341 229.866 537.024 229.966 536.706 230.066 cv
537.006 231.02 li
537.084 230.995 537.161 230.971 537.239 230.946 cv
12.9006 229.942 mo
12.5996 230.896 li
12.9178 230.996 13.2366 231.096 13.5563 231.196 cv
13.855 230.242 li
13.5362 230.142 13.218 230.042 12.9006 229.942 cv
11.6717 229.552 mo
11.3678 230.505 li
11.46 230.534 11.5523 230.564 11.6446 230.593 cv
11.9479 229.64 li
11.8557 229.611 11.7636 229.581 11.6717 229.552 cv
538 228.5 mo
538 229.5 li
539 229.5 li
539 228.5 li
538 228.5 li
538 226.5 mo
538 227.5 li
539 227.5 li
539 226.5 li
538 226.5 li
25.4999 151.5 mo
25.4999 192.5 li
550.5 192.5 li
550.5 151.5 li
25.4999 151.5 li
0 30.0001 mo
0 81.0001 li
570 81.0001 li
570 30.0001 li
0 30.0001 li
false sop
0 0 0 0 cmyk
f
570 81.0001 mo
0 81.0001 li
0 30.0001 li
570 30.0001 li
570 81.0001 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 345 ]ct
[572 0 0 53 -1 263 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 572 
/H 53 
/M[572 0 0 -53 0 53 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 572 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 572 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 572 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 572 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNLb
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNLb
JcLB&JcLB&^&S2jgW.Qjc%=2lc)f.k`'+ad!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3`!!E)jImqO<
Ji/-;Ji0Pc")bYO&D[><!.k3&!.k3b!.k3&!.k3&!.k3&!.k3&!.k4L!!Df!ej5/nJcLB&JcP*:!s="^
;Od`=!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!;ca"mmWPJ8-=kPJcLB&JcOs6"+[OU#M]<2!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3&!5/@9mmK4<Q<;?2JcLB&JcMbM!tg0Y@bq*:!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!58I4!!hsd.Qb8-9`g:SJcLB&JcP$8";,LO8HGF`JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP]K
#J@W4.mKrA<0%$2!.k3&!9O7`&RNIHT`BZEJcLB&JcLB&JcLB&JcNLbJcLB&JcLB&^&SEc_PBmU:8,WY
c2`FrJcLB&VZ6f5Ct0um!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3_!!jO_L.NjbW6Z=.!.k3&!.k3H
!!<UHbnf=>JcLB&JcLB&^&W`bJcLB&JcLB&JcLB&JcLB&qZ$mTX-H4*;O5iLOT9t5JcLB&irB.DZQl4F
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcPQG#=u:o2D.5.]orGJ!.k3&!9!n[#.q&^iW+Q1JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&\Gun-Vm/N;._WJ5df=t"JcLB&T`>1gY<N-O!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3b!;Z[%!FMG01b(Q=XWWf-JcLB&JcOd1!t;5e9Vh`@!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!;?I"#uS*s.On$LN?+;bJcLB&JcO[.!tVT"/uSc%!.k3&!.k3&!.k3&!.k3b!.k3&!.k3&!4W"8"@^4s
/Lj<;K-JhGJcLB&JcMGD"!<l3*p3NT!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!4;e5(I?Vs.Onc7LaC[R
JcLB&JcM>A"$hEt,jGA]!.k3&!.k3b!.k3&!.k3&!.k3&!.k3&!.k4D!!r]ZiGL+p;p:@BQiM^<JcLB&
h#IO"WL4X(!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4@!!l'OFY,(SXfr_5!.k3&!.k4)!!>',V%i.o
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcN(V#AE:91G3(?RFqRl!.k3&!1X#k!\qW`lMuM:JcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&^&[a)#mG.t@Q,cE_2JPd!.k3&!.k4*!!=XpHj6YPJcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcP9?#Q\_VJhSoubC,l\JcLB&JcOI("9T=pI0m(WJcLB&JcLB&JcLB&JcLB&^&W`bJcLB&
JcN%U#RGUbKdo#ejCd3IJcLB&JcM2="!HHD%IO4J!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!3Q;.#AMA@
/hT]]E!G2"JcLB&JcM):"!GO**Us,]!.k3&!.k3b!.k3&!.k3&!.k3&!.k3&!.k4=!!s`\[sBMRCZ/eB
T)aHCJcLB&ec5e8_.Fan!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k4:!!sZQeP[kKE8aq%U&]cFJcLB&
df9JG_.X)C!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3P!!sN\fM<tHG.h/di;eH0JcLB&PQ1epYB1?I
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3b!:0[l*e!0@.P?=dDZZU4JcLB&JcO=$"9Mo;J-*%WJcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcP$8#nqa?5Un7T\RPf=!.k3&!.k3u!!?N6EsB&QJcLB&JcLB&JcLB&
JcLB&^&W`bJcLB&JcMbM#Fj+;/i8m-G2`LR!.k3&!0[Bb"\ldHoDjICJcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&VZ6u:Tt4DW6]ArUjT'l4JcLB&O8o@k9\`/4!.k3&!.k3&!58Gb!.k3&!.k3&!.k3&!.k3&!9X=f
#HaLp/N/aD4/Dq/!.k3&!71]J"@(fu[fD![JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&j8]H)NhL,97WINQ
VuVDLJcLB&bQ%`=e3sc>!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3I!!j[L[7r/+L?BW@!.k3&!.k31
!!@>u1^3^UJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNLbjT#Q>Q,6?I.[JaAVZ;;KJcLB&bl@if`)$cO
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k41!!u>[a@.R2UWtLoWrR_OJcLB&b5_YHMjRiQ]`<WaJcLB&
JcLB&JcLB&JcNLbJcLB&JcLB&U]:]&5F]8:.Po/P/a37e!.k3&!/pm[$(.MYqZ)3JJcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&TE#6TPg23;1odo[li;V;JcLB&M#[V]IBZ9A!.k3&!.k3&!58Gb!.k3&!.k3&!.k3&
!.k3&!9!na"s^FX/h0,nSia"RJcLB&JcNmm!ucB^5/%#K!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!8[\^
!>j%^/Lim"V_tXXJcLB&JcNdj!t:Ks0`;!'!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!1j/r.DD'$.TE+M
0^\pm!.k3&!/COW+E"b:!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3b!8[\\1>d[H.nlPaXg`nkK"$?@
a0u,uoXqp=JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcOO*#<0qV5:U0sHE_:=DLubXDT$DnKCcnZJcLB&
JcLB&JcLB&JcLB&^&W`bJcLB&JcM;@##D1h6!_,-mJqh=JcLB&L&_;smJm6=!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!1Ell!`l\$@_;p7!.k3&!.k3(!!+//JcLB&JcLB&^&W`bJcLB&JcLB&JcLB&JcLB&f`2.P
][t(+Y5j.SJcLB&`;fo[m_AgS!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!7q2R&6ZZu6a8P$2M*i=2T%ER
<Up%gJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcM/<!te;HcL8u/b_"&jb_41@gAlg*JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&^&W`bJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&^&W`bJcLB&JcLB&JcLB&JcLB&!!%N~>

%%EndBinary
grestore
np
1 lw
0 lc
0 lj
8 ml
[1 1 ] 0 dsh
true sadj
527.754 39.5 mo
3.5 39.5001 li
0 0 0 1 cmyk
@
529.5 33.5 mo
529.5 40.1924 li
0 0 0 0 cmyk
f
529.5 33.5 mo
529.5 40.1924 li
0 0 0 1 cmyk
@
529.5 40.5 mo
567.643 77.9532 li
@
26.7598 46.0001 mo
25.7598 46.0001 li
25.7598 47.0001 li
26.7598 47.0001 li
cp
33.7598 46.0001 mo
29.7598 46.0001 li
29.7598 47.0001 li
33.7598 47.0001 li
cp
37.7598 46.0001 mo
36.7598 46.0001 li
36.7598 47.0001 li
37.7598 47.0001 li
cp
44.7598 46.0001 mo
40.7598 46.0001 li
40.7598 47.0001 li
44.7598 47.0001 li
cp
48.7598 46.0001 mo
47.7598 46.0001 li
47.7598 47.0001 li
48.7598 47.0001 li
cp
55.7598 46.0001 mo
51.7598 46.0001 li
51.7598 47.0001 li
55.7598 47.0001 li
cp
59.7598 46.0001 mo
58.7598 46.0001 li
58.7598 47.0001 li
59.7598 47.0001 li
cp
66.7598 46.0001 mo
62.7598 46.0001 li
62.7598 47.0001 li
66.7598 47.0001 li
cp
70.7598 46.0001 mo
69.7598 46.0001 li
69.7598 47.0001 li
70.7598 47.0001 li
cp
77.7598 46.0001 mo
73.7598 46.0001 li
73.7598 47.0001 li
77.7598 47.0001 li
cp
81.7598 46.0001 mo
80.7598 46.0001 li
80.7598 47.0001 li
81.7598 47.0001 li
cp
88.7598 46.0001 mo
84.7598 46.0001 li
84.7598 47.0001 li
88.7598 47.0001 li
cp
92.7598 46.0001 mo
91.7598 46.0001 li
91.7598 47.0001 li
92.7598 47.0001 li
cp
99.7598 46.0001 mo
95.7598 46.0001 li
95.7598 47.0001 li
99.7598 47.0001 li
cp
103.76 46.0001 mo
102.76 46.0001 li
102.76 47.0001 li
103.76 47.0001 li
cp
110.76 46.0001 mo
106.76 46.0001 li
106.76 47.0001 li
110.76 47.0001 li
cp
114.76 46.0001 mo
113.76 46.0001 li
113.76 47.0001 li
114.76 47.0001 li
cp
121.76 46.0001 mo
117.76 46.0001 li
117.76 47.0001 li
121.76 47.0001 li
cp
125.76 46.0001 mo
124.76 46.0001 li
124.76 47.0001 li
125.76 47.0001 li
cp
132.76 46.0001 mo
128.76 46.0001 li
128.76 47.0001 li
132.76 47.0001 li
cp
136.76 46.0001 mo
135.76 46.0001 li
135.76 47.0001 li
136.76 47.0001 li
cp
143.76 46.0001 mo
139.76 46.0001 li
139.76 47.0001 li
143.76 47.0001 li
cp
147.76 46.0001 mo
146.76 46.0001 li
146.76 47.0001 li
147.76 47.0001 li
cp
154.76 46.0001 mo
150.76 46.0001 li
150.76 47.0001 li
154.76 47.0001 li
cp
158.76 46.0001 mo
157.76 46.0001 li
157.76 47.0001 li
158.76 47.0001 li
cp
165.76 46.0001 mo
161.76 46.0001 li
161.76 47.0001 li
165.76 47.0001 li
cp
169.76 46.0001 mo
168.76 46.0001 li
168.76 47.0001 li
169.76 47.0001 li
cp
176.76 46.0001 mo
172.76 46.0001 li
172.76 47.0001 li
176.76 47.0001 li
cp
180.76 46.0001 mo
179.76 46.0001 li
179.76 47.0001 li
180.76 47.0001 li
cp
187.76 46.0001 mo
183.76 46.0001 li
183.76 47.0001 li
187.76 47.0001 li
cp
191.76 46.0001 mo
190.76 46.0001 li
190.76 47.0001 li
191.76 47.0001 li
cp
198.76 46.0001 mo
194.76 46.0001 li
194.76 47.0001 li
198.76 47.0001 li
cp
202.76 46.0001 mo
201.76 46.0001 li
201.76 47.0001 li
202.76 47.0001 li
cp
209.76 46.0001 mo
205.76 46.0001 li
205.76 47.0001 li
209.76 47.0001 li
cp
213.76 46 mo
212.76 46 li
212.76 47 li
213.76 47 li
cp
220.76 46 mo
216.76 46 li
216.76 47 li
220.76 47 li
cp
224.76 46 mo
223.76 46 li
223.76 47 li
224.76 47 li
cp
231.76 46 mo
227.76 46 li
227.76 47 li
231.76 47 li
cp
235.76 46 mo
234.76 46 li
234.76 47 li
235.76 47 li
cp
242.76 46 mo
238.76 46 li
238.76 47 li
242.76 47 li
cp
246.76 46 mo
245.76 46 li
245.76 47 li
246.76 47 li
cp
253.76 46 mo
249.76 46 li
249.76 47 li
253.76 47 li
cp
257.76 46 mo
256.76 46 li
256.76 47 li
257.76 47 li
cp
264.76 46 mo
260.76 46 li
260.76 47 li
264.76 47 li
cp
268.76 46 mo
267.76 46 li
267.76 47 li
268.76 47 li
cp
275.76 46 mo
271.76 46 li
271.76 47 li
275.76 47 li
cp
279.76 46 mo
278.76 46 li
278.76 47 li
279.76 47 li
cp
286.76 46 mo
282.76 46 li
282.76 47 li
286.76 47 li
cp
290.76 46 mo
289.76 46 li
289.76 47 li
290.76 47 li
cp
297.76 46 mo
293.76 46 li
293.76 47 li
297.76 47 li
cp
301.76 46 mo
300.76 46 li
300.76 47 li
301.76 47 li
cp
308.76 46 mo
304.76 46 li
304.76 47 li
308.76 47 li
cp
312.76 46 mo
311.76 46 li
311.76 47 li
312.76 47 li
cp
319.76 46 mo
315.76 46 li
315.76 47 li
319.76 47 li
cp
323.76 46 mo
322.76 46 li
322.76 47 li
323.76 47 li
cp
330.76 46 mo
326.76 46 li
326.76 47 li
330.76 47 li
cp
334.76 46 mo
333.76 46 li
333.76 47 li
334.76 47 li
cp
341.76 46 mo
337.76 46 li
337.76 47 li
341.76 47 li
cp
345.76 46 mo
344.76 46 li
344.76 47 li
345.76 47 li
cp
352.76 46 mo
348.76 46 li
348.76 47 li
352.76 47 li
cp
356.76 46 mo
355.76 46 li
355.76 47 li
356.76 47 li
cp
363.76 46 mo
359.76 46 li
359.76 47 li
363.76 47 li
cp
367.76 46 mo
366.76 46 li
366.76 47 li
367.76 47 li
cp
374.76 46 mo
370.76 46 li
370.76 47 li
374.76 47 li
cp
378.76 46 mo
377.76 46 li
377.76 47 li
378.76 47 li
cp
385.76 46 mo
381.76 46 li
381.76 47 li
385.76 47 li
cp
389.76 46 mo
388.76 46 li
388.76 47 li
389.76 47 li
cp
396.76 46 mo
392.76 46 li
392.76 47 li
396.76 47 li
cp
400.76 46 mo
399.76 46 li
399.76 47 li
400.76 47 li
cp
407.76 46 mo
403.76 46 li
403.76 47 li
407.76 47 li
cp
411.76 46 mo
410.76 46 li
410.76 47 li
411.76 47 li
cp
418.76 46 mo
414.76 46 li
414.76 47 li
418.76 47 li
cp
422.76 46 mo
421.76 46 li
421.76 47 li
422.76 47 li
cp
429.76 46 mo
425.76 46 li
425.76 47 li
429.76 47 li
cp
433.76 46 mo
432.76 46 li
432.76 47 li
433.76 47 li
cp
440.76 46 mo
436.76 46 li
436.76 47 li
440.76 47 li
cp
444.76 46 mo
443.76 46 li
443.76 47 li
444.76 47 li
cp
451.76 46 mo
447.76 46 li
447.76 47 li
451.76 47 li
cp
455.76 46 mo
454.76 46 li
454.76 47 li
455.76 47 li
cp
462.76 46 mo
458.76 46 li
458.76 47 li
462.76 47 li
cp
466.76 46 mo
465.76 46 li
465.76 47 li
466.76 47 li
cp
473.76 46 mo
469.76 46 li
469.76 47 li
473.76 47 li
cp
477.76 46 mo
476.76 46 li
476.76 47 li
477.76 47 li
cp
484.76 46 mo
480.76 46 li
480.76 47 li
484.76 47 li
cp
488.76 46 mo
487.76 46 li
487.76 47 li
488.76 47 li
cp
495.76 46 mo
491.76 46 li
491.76 47 li
495.76 47 li
cp
499.76 46 mo
498.76 46 li
498.76 47 li
499.76 47 li
cp
506.76 46 mo
502.76 46 li
502.76 47 li
506.76 47 li
cp
510.76 46 mo
509.76 46 li
509.76 47 li
510.76 47 li
cp
517.76 46 mo
513.76 46 li
513.76 47 li
517.76 47 li
cp
521.76 46 mo
520.76 46 li
520.76 47 li
521.76 47 li
cp
528.76 46 mo
524.76 46 li
524.76 47 li
528.76 47 li
cp
532.76 46 mo
531.76 46 li
531.76 47 li
532.76 47 li
cp
22.5 44.5001 mo
18.5 46.5001 li
22.5 48.5001 li
22.5 47.0001 li
22.7598 47.0001 li
22.7598 46.0001 li
22.5 46.0001 li
cp
538.754 44.5 mo
538.754 46 li
535.76 46 li
535.76 47 li
538.754 47 li
538.754 48.5 li
542.754 46.5 li
cp
f
528.614 68.0795 mo
529.953 72.3466 li
525.736 70.8571 li
cp
524.497 65.973 mo
527.275 68.8513 li
526.555 69.5457 li
523.778 66.6674 li
cp
521.719 63.0947 mo
522.414 63.8142 li
521.694 64.5086 li
521 63.7891 li
cp
516.859 58.0576 mo
519.636 60.9359 li
518.917 61.6303 li
516.139 58.752 li
cp
514.081 55.1793 mo
514.775 55.8989 li
514.056 56.5933 li
513.361 55.8737 li
cp
509.22 50.1422 mo
511.998 53.0205 li
511.278 53.715 li
508.5 50.8366 li
cp
506.442 47.2639 mo
507.137 47.9835 li
506.417 48.6779 li
505.723 47.9583 li
cp
501.582 42.2269 mo
504.359 45.1052 li
503.64 45.7996 li
500.862 42.9213 li
cp
498.804 39.3485 mo
499.498 40.0681 li
498.779 40.7625 li
498.084 40.043 li
cp
491.5 32.5 mo
495.717 33.9895 li
494.637 35.0311 li
496.721 37.1898 li
496.001 37.8842 li
493.918 35.7255 li
492.839 36.7671 li
cp
f
589.1 77.5 mo
567.5 77.5001 li
@
589.1 71.5 mo
567.5 71.5001 li
@
579 60.5 mo
579 61.5 li
580 61.5 li
580 60.5 li
cp
579 53.5 mo
579 57.5 li
580 57.5 li
580 53.5 li
cp
577.5 67.1115 mo
579.5 71.1115 li
581.5 67.1115 li
580 67.1115 li
580 64.5 li
579 64.5 li
579 67.1115 li
cp
f
579 89.1115 mo
579 88.1115 li
580 88.1115 li
580 89.1115 li
cp
579 96.1115 mo
579 92.1115 li
580 92.1115 li
580 96.1115 li
cp
577.5 82.5 mo
579.5 78.5 li
581.5 82.5 li
580 82.5 li
580 85.1115 li
579 85.1115 li
579 82.5 li
cp
f
%ADOBeginSubsetFont: LWYAAA+TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LWYAAA+TimesNewRomanPSMT def/FontInfo 6 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 76 /L putdup 98 /b putdup 104 /h putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/L <1C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C221DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B847D2C24AD687E0CDB56> |-/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |-/h <1C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B585E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C4483796F735A795EACD82F245D81FB43B5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RSIYVB+TimesNewRomanPSMT /LWYAAA+TimesNewRomanPSMT findfont ct_VMDictPut/RSIYVB+TimesNewRomanPSMT*1 [76{/.notdef}rp /L 21{/.notdef}rp /b 5{/.notdef}rp /h 151{/.notdef}rp]RSIYVB+TimesNewRomanPSMT nfRSIYVB+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf503.129 65.6354 mo(b)sh593.094 79.5098 mo(h)sh103.926 59.7053 mo(L)sh302.374 93.3126 mo
302.374 93.3131 li
302.374 93.313 li
cp
242.853 33.1463 mo
302.492 92.7237 li
303.08 89.7771 li
305.204 96.14 li
298.839 94.0219 li
301.785 93.4312 li
242.147 33.8537 li
cp
f
243 33.5 mo
243 88.1656 li
245.5 86.499 li
242.5 92.499 li
239.5 86.499 li
242 88.1656 li
242 33.5 li
cp
f
%ADOBeginSubsetFont: LWYAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginRSIYVB+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/x <1C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195DAADD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B5B8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A2319F3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA25988169831DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BEACD6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D7528EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |-systemdict /gcheck known {setglobal} if end {end} ifendRSIYVB+TimesNewRomanPSMT /Encoding getdup 120 /x putpop%ADOEndSubsetFont
/RSIYVB+TimesNewRomanPSMT*1 [76{/.notdef}rp /L 21{/.notdef}rp /b 5{/.notdef}rp /h 15{/.notdef}rp /x 135{/.notdef}rp]RSIYVB+TimesNewRomanPSMT nfRSIYVB+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf352.715 24.182 mo(x)sh354.815 29.5001 mo
360.815 32.5001 li
354.815 35.5001 li
356.482 33.0001 li
243.5 33 li
243.5 32 li
356.482 32.0001 li
cp
f
%ADOBeginSubsetFont: LWYAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginRSIYVB+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/y <1C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BAF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DBF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A71BC990F312D4821883A95164BCE1683B85434AFA8> |-/z <1C60D8A8C9B77FE2C18484DB453227C527C164B5A1471C4657A5A14A46A1D3A0BD899640627BE2A7B9DB921E26CD53975830B919737E4B957FDCE605D77DC327B798A39B69F36340D55162C5C44140DACBE16FE7873A74F99AB90B7497> |-systemdict /gcheck known {setglobal} if end {end} ifendRSIYVB+TimesNewRomanPSMT /Encoding getdup 121 /y putdup 122 /z putpop%ADOEndSubsetFont
/RSIYVB+TimesNewRomanPSMT*1 [76{/.notdef}rp /L 21{/.notdef}rp /b 5{/.notdef}rp /h 15{/.notdef}rp /x /y /z 133{/.notdef}rp]RSIYVB+TimesNewRomanPSMT nfRSIYVB+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf227.767 98.3379 mo(z)sh308.503 91.9394 mo(y)sh50.5 264 mo
58.5001 264 li
58.5001 265 li
50.5 265 li
50.5 264 li
61.5 264 mo
62.5 264 li
62.5 265 li
61.5 265 li
61.5 264 li
65.4999 264 mo
66.5 264 li
66.5 265 li
65.4999 265 li
65.4999 264 li
69.5001 264 mo
77.5 264 li
77.5 265 li
69.5001 265 li
69.5001 264 li
80.5 264 mo
81.4999 264 li
81.4999 265 li
80.5 265 li
80.5 264 li
84.5 264 mo
85.5 264 li
85.5 265 li
84.5 265 li
84.5 264 li
88.5 264 mo
96.5 264 li
96.5 265 li
88.5 265 li
88.5 264 li
99.5 264 mo
100.5 264 li
100.5 265 li
99.5 265 li
99.5 264 li
103.5 264 mo
104.5 264 li
104.5 265 li
103.5 265 li
103.5 264 li
107.5 264 mo
115.5 264 li
115.5 265 li
107.5 265 li
107.5 264 li
118.5 264 mo
119.5 264 li
119.5 265 li
118.5 265 li
118.5 264 li
122.5 264 mo
123.5 264 li
123.5 265 li
122.5 265 li
122.5 264 li
126.5 264 mo
134.5 264 li
134.5 265 li
126.5 265 li
126.5 264 li
137.5 264 mo
138.5 264 li
138.5 265 li
137.5 265 li
137.5 264 li
141.5 264 mo
142.5 264 li
142.5 265 li
141.5 265 li
141.5 264 li
145.5 264 mo
153.5 264 li
153.5 265 li
145.5 265 li
145.5 264 li
156.5 264 mo
157.5 264 li
157.5 265 li
156.5 265 li
156.5 264 li
160.5 264 mo
161.5 264 li
161.5 265 li
160.5 265 li
160.5 264 li
164.5 264 mo
172.5 264 li
172.5 265 li
164.5 265 li
164.5 264 li
175.5 264 mo
176.5 264 li
176.5 265 li
175.5 265 li
175.5 264 li
179.5 264 mo
180.5 264 li
180.5 265 li
179.5 265 li
179.5 264 li
183.5 264 mo
191.5 264 li
191.5 265 li
183.5 265 li
183.5 264 li
194.5 264 mo
195.5 264 li
195.5 265 li
194.5 265 li
194.5 264 li
198.5 264 mo
199.5 264 li
199.5 265 li
198.5 265 li
198.5 264 li
202.5 264 mo
210.5 264 li
210.5 265 li
202.5 265 li
202.5 264 li
213.5 264 mo
214.5 264 li
214.5 265 li
213.5 265 li
213.5 264 li
217.5 264 mo
218.5 264 li
218.5 265 li
217.5 265 li
217.5 264 li
221.5 264 mo
229.5 264 li
229.5 265 li
221.5 265 li
221.5 264 li
232.5 264 mo
233.5 264 li
233.5 265 li
232.5 265 li
232.5 264 li
236.5 264 mo
237.5 264 li
237.5 265 li
236.5 265 li
236.5 264 li
240.5 264 mo
248.5 264 li
248.5 265 li
240.5 265 li
240.5 264 li
251.5 264 mo
252.5 264 li
252.5 265 li
251.5 265 li
251.5 264 li
255.5 264 mo
256.5 264 li
256.5 265 li
255.5 265 li
255.5 264 li
259.5 264 mo
267.5 264 li
267.499 265 li
259.5 265 li
259.5 264 li
270.5 264 mo
271.5 264 li
271.5 265 li
270.5 265 li
270.5 264 li
274.5 264 mo
275.5 264 li
275.5 265 li
274.5 265 li
274.5 264 li
278.499 264 mo
286.5 264 li
286.5 265 li
278.499 265 li
278.499 264 li
289.499 264 mo
290.499 264 li
290.499 265 li
289.499 265 li
289.499 264 li
293.499 264 mo
294.499 264 li
294.499 265 li
293.499 265 li
293.499 264 li
297.499 264 mo
305.499 264 li
305.499 265 li
297.499 265 li
297.499 264 li
308.499 264 mo
309.499 264 li
309.499 265 li
308.499 265 li
308.499 264 li
312.499 264 mo
313.499 264 li
313.499 265 li
312.499 265 li
312.499 264 li
316.499 264 mo
324.499 264 li
324.499 265 li
316.499 265 li
316.499 264 li
327.499 264 mo
328.499 264 li
328.499 265 li
327.499 265 li
327.499 264 li
331.499 264 mo
332.499 264 li
332.499 265 li
331.499 265 li
331.499 264 li
335.499 264 mo
343.499 264 li
343.499 265 li
335.499 265 li
335.499 264 li
346.499 264 mo
347.499 264 li
347.499 265 li
346.499 265 li
346.499 264 li
350.499 264 mo
351.499 264 li
351.499 265 li
350.499 265 li
350.499 264 li
354.499 264 mo
362.499 264 li
362.499 265 li
354.499 265 li
354.499 264 li
365.499 264 mo
366.499 264 li
366.499 265 li
365.499 265 li
365.499 264 li
369.499 264 mo
370.499 264 li
370.499 265 li
369.499 265 li
369.499 264 li
373.499 264 mo
381.499 264 li
381.499 265 li
373.499 265 li
373.499 264 li
384.499 264 mo
385.499 264 li
385.499 265 li
384.499 265 li
384.499 264 li
388.499 264 mo
389.499 264 li
389.499 265 li
388.499 265 li
388.499 264 li
392.499 264 mo
400.499 264 li
400.499 265 li
392.499 265 li
392.499 264 li
403.499 264 mo
404.499 264 li
404.499 265 li
403.499 265 li
403.499 264 li
407.499 264 mo
408.499 264 li
408.499 265 li
407.499 265 li
407.499 264 li
411.499 264 mo
419.499 264 li
419.499 265 li
411.499 265 li
411.499 264 li
422.499 264 mo
423.499 264 li
423.499 265 li
422.499 265 li
422.499 264 li
426.499 264 mo
427.499 264 li
427.499 265 li
426.499 265 li
426.499 264 li
430.499 264 mo
438.499 264 li
438.499 265 li
430.499 265 li
430.499 264 li
441.499 264 mo
442.499 264 li
442.499 265 li
441.499 265 li
441.499 264 li
445.499 264 mo
446.499 264 li
446.499 265 li
445.499 265 li
445.499 264 li
449.499 264 mo
457.499 264 li
457.499 265 li
449.499 265 li
449.499 264 li
460.499 264 mo
461.499 264 li
461.499 265 li
460.499 265 li
460.499 264 li
464.499 264 mo
465.499 264 li
465.499 265 li
464.499 265 li
464.499 264 li
468.499 264 mo
476.499 264 li
476.499 265 li
468.499 265 li
468.499 264 li
479.499 264 mo
480.499 264 li
480.499 265 li
479.499 265 li
479.499 264 li
483.499 264 mo
484.499 264 li
484.499 265 li
483.499 265 li
483.499 264 li
487.499 264 mo
495.499 264 li
495.499 265 li
487.499 265 li
487.499 264 li
498.499 264 mo
499.499 264 li
499.499 265 li
498.499 265 li
498.499 264 li
502.499 264 mo
503.499 264 li
503.499 265 li
502.499 265 li
502.499 264 li
506.499 264 mo
514.499 264 li
514.499 265 li
506.499 265 li
506.499 264 li
517.499 264 mo
518.499 264 li
518.498 265 li
517.499 265 li
517.499 264 li
521.499 264 mo
522.499 264 li
522.499 265 li
521.499 265 li
521.499 264 li
525.499 264 mo
533.499 264 li
533.498 265 li
525.499 265 li
525.499 264 li
536.499 264 mo
537.499 264 li
537.499 265 li
536.499 265 li
536.499 264 li
540.499 264 mo
541.499 264 li
541.499 265 li
540.498 265 li
540.499 264 li
544.498 264 mo
552.498 264 li
552.498 265 li
544.498 265 li
544.498 264 li
555.498 264 mo
556.498 264 li
556.498 265 li
555.498 265 li
555.498 264 li
559.498 264 mo
560.498 264 li
560.498 265 li
559.498 265 li
559.498 264 li
563.498 264 mo
571.498 264 li
571.498 265 li
563.498 265 li
563.498 264 li
574.498 264 mo
575.498 264 li
575.498 265 li
574.498 265 li
574.498 264 li
f
537.372 225.072 mo
467.858 246.892 371.581 258 274.879 258.001 cv
191.541 258 107.894 249.749 40.8019 232.967 cv
30.6353 230.424 21.0033 227.717 11.9545 224.86 cv
12.2556 223.906 li
21.2831 226.756 30.8957 229.458 41.0446 231.997 cv
108.024 248.752 191.608 257.002 274.879 257.001 cv
371.502 257.002 467.713 245.893 537.072 224.118 cv
537.372 225.072 li
f
274.5 264.001 mo
274.353 264.001 274.207 264.001 274.061 264.001 cv
274.061 263.001 li
274.332 263.001 274.602 263.001 274.873 263.001 cv
275.061 263.001 li
275.061 264 li
274.5 264 li
274.5 264.001 li
0 0 0 .2 cmyk
f
275.061 264.001 mo
274.873 264.001 li
274.749 264.001 274.624 264.001 274.5 264.001 cv
274.5 264 li
275.061 264 li
275.061 264.001 li
0 0 0 1 cmyk
f
276.061 264 mo
276.06 263 li
276.393 263 276.727 263 277.06 262.999 cv
277.062 263.999 li
276.728 264 276.395 264 276.061 264 cv
273.06 264 mo
272.726 263.999 272.393 263.999 272.059 263.998 cv
272.062 262.998 li
272.395 262.999 272.728 262.999 273.061 263 cv
273.06 264 li
278.062 263.997 mo
278.06 262.997 li
278.393 262.996 278.726 262.995 279.059 262.994 cv
279.062 263.994 li
278.729 263.995 278.396 263.996 278.062 263.997 cv
271.059 263.995 mo
270.725 263.994 270.392 263.993 270.058 263.992 cv
270.062 262.992 li
270.395 262.993 270.728 262.994 271.062 262.995 cv
271.059 263.995 li
280.063 263.99 mo
280.059 262.99 li
280.392 262.989 280.725 262.987 281.058 262.986 cv
281.063 263.986 li
281.063 263.986 li
280.729 263.987 280.396 263.989 280.063 263.99 cv
269.057 263.988 mo
268.724 263.986 268.39 263.984 268.057 263.982 cv
268.062 262.982 li
268.395 262.984 268.729 262.986 269.062 262.988 cv
269.057 263.988 li
282.063 263.98 mo
282.058 262.98 li
282.391 262.979 282.724 262.976 283.057 262.974 cv
283.063 263.974 li
282.73 263.976 282.397 263.978 282.063 263.98 cv
267.056 263.977 mo
266.722 263.975 266.388 263.972 266.055 263.97 cv
266.062 262.97 li
266.395 262.972 266.728 262.975 267.062 262.977 cv
267.056 263.977 li
284.063 263.967 mo
284.056 262.967 li
284.389 262.965 284.722 262.962 285.055 262.96 cv
285.064 263.96 li
285.064 263.96 li
284.73 263.962 284.397 263.965 284.063 263.967 cv
265.054 263.963 mo
264.72 263.96 264.387 263.957 264.053 263.954 cv
264.062 262.954 li
264.395 262.957 264.728 262.96 265.062 262.963 cv
265.054 263.963 li
286.064 263.951 mo
286.055 262.951 li
286.388 262.948 286.721 262.945 287.054 262.942 cv
287.064 263.942 li
286.73 263.945 286.397 263.948 286.064 263.951 cv
263.052 263.945 mo
262.719 263.942 262.385 263.939 262.051 263.935 cv
262.061 262.936 li
262.395 262.939 262.728 262.942 263.062 262.945 cv
263.052 263.945 li
288.064 263.932 mo
288.053 262.932 li
288.386 262.928 288.719 262.925 289.052 262.921 cv
289.063 263.921 li
288.73 263.925 288.397 263.928 288.064 263.932 cv
261.05 263.925 mo
260.716 263.921 260.383 263.917 260.049 263.913 cv
260.061 262.914 li
260.394 262.917 260.728 262.921 261.061 262.925 cv
261.05 263.925 li
290.063 263.909 mo
290.051 262.909 li
290.384 262.905 290.717 262.901 291.05 262.897 cv
291.063 263.897 li
290.73 263.901 290.397 263.905 290.063 263.909 cv
259.048 263.901 mo
259.048 263.901 li
259.048 263.901 259.048 263.901 259.048 263.901 cv
259.048 263.901 mo
258.714 263.897 258.38 263.893 258.047 263.888 cv
258.06 262.888 li
258.394 262.893 258.727 262.897 259.061 262.901 cv
259.048 263.901 li
292.063 263.883 mo
292.049 262.883 li
292.382 262.879 292.715 262.874 293.048 262.869 cv
293.062 263.869 li
292.729 263.874 292.396 263.879 292.063 263.883 cv
257.046 263.874 mo
256.712 263.87 256.378 263.865 256.045 263.86 cv
256.06 262.86 li
256.393 262.865 256.726 262.87 257.06 262.874 cv
257.046 263.874 li
294.062 263.854 mo
294.046 262.854 li
294.379 262.849 294.712 262.844 295.045 262.839 cv
295.061 263.839 li
294.728 263.844 294.395 263.849 294.062 263.854 cv
255.043 263.844 mo
254.71 263.839 254.376 263.834 254.042 263.828 cv
254.059 262.828 li
254.392 262.834 254.726 262.839 255.059 262.844 cv
255.043 263.844 li
296.061 263.822 mo
296.044 262.822 li
296.377 262.817 296.709 262.811 297.042 262.805 cv
297.06 263.805 li
296.727 263.811 296.394 263.816 296.061 263.822 cv
253.041 263.811 mo
252.707 263.805 252.373 263.799 252.04 263.793 cv
252.058 262.793 li
252.391 262.799 252.725 262.805 253.058 262.811 cv
253.041 263.811 li
298.059 263.787 mo
298.041 262.787 li
298.374 262.781 298.706 262.774 299.039 262.768 cv
299.058 263.768 li
298.725 263.774 298.393 263.781 298.059 263.787 cv
251.038 263.775 mo
250.704 263.768 250.371 263.762 250.037 263.755 cv
250.057 262.755 li
250.39 262.762 250.724 262.768 251.057 262.775 cv
251.038 263.775 li
300.058 263.748 mo
300.038 262.748 li
300.37 262.742 300.703 262.735 301.036 262.728 cv
301.057 263.728 li
300.724 263.735 300.391 263.741 300.058 263.748 cv
249.036 263.735 mo
248.702 263.728 248.368 263.721 248.034 263.714 cv
248.056 262.714 li
248.389 262.721 248.722 262.728 249.056 262.735 cv
249.036 263.735 li
302.056 263.706 mo
302.034 262.707 li
302.367 262.699 302.699 262.692 303.032 262.685 cv
303.055 263.684 li
303.055 263.684 li
302.722 263.692 302.389 263.699 302.056 263.706 cv
247.033 263.692 mo
246.699 263.684 246.365 263.677 246.031 263.669 cv
246.054 262.669 li
246.388 262.677 246.721 262.685 247.055 262.692 cv
247.033 263.692 li
304.053 263.662 mo
304.03 262.662 li
304.363 262.654 304.696 262.646 305.028 262.638 cv
305.052 263.638 li
304.719 263.646 304.387 263.654 304.053 263.662 cv
245.03 263.646 mo
244.696 263.638 244.362 263.629 244.028 263.621 cv
244.053 262.622 li
244.386 262.63 244.72 262.638 245.054 262.646 cv
245.03 263.646 li
306.051 263.613 mo
306.026 262.614 li
306.359 262.605 306.691 262.597 307.024 262.588 cv
307.05 263.588 li
306.717 263.597 306.384 263.605 306.051 263.613 cv
243.027 263.596 mo
243.027 263.596 li
243.027 263.596 243.027 263.596 243.027 263.596 cv
243.027 263.596 mo
242.693 263.588 242.359 263.579 242.025 263.57 cv
242.051 262.57 li
242.385 262.579 242.718 262.588 243.052 262.596 cv
243.027 263.596 li
308.048 263.562 mo
308.022 262.562 li
308.354 262.553 308.687 262.545 309.02 262.535 cv
309.047 263.535 li
309.047 263.535 li
308.714 263.544 308.381 263.553 308.048 263.562 cv
241.024 263.543 mo
240.69 263.534 240.356 263.525 240.022 263.516 cv
240.05 262.516 li
240.383 262.526 240.717 262.535 241.051 262.544 cv
241.024 263.543 li
310.045 263.507 mo
310.017 262.508 li
310.35 262.498 310.682 262.489 311.015 262.479 cv
311.044 263.479 li
310.711 263.488 310.378 263.498 310.045 263.507 cv
239.02 263.488 mo
238.686 263.478 238.353 263.468 238.019 263.458 cv
238.048 262.459 li
238.382 262.469 238.715 262.478 239.049 262.488 cv
239.02 263.488 li
312.042 263.45 mo
312.012 262.45 li
312.345 262.44 312.677 262.43 313.01 262.42 cv
313.04 263.419 li
312.707 263.43 312.375 263.44 312.042 263.45 cv
237.017 263.428 mo
236.683 263.418 236.349 263.408 236.015 263.397 cv
236.047 262.398 li
236.38 262.408 236.714 262.419 237.047 262.429 cv
237.017 263.428 li
314.038 263.389 mo
314.007 262.389 li
314.339 262.379 314.672 262.368 315.004 262.357 cv
315.036 263.357 li
314.704 263.367 314.371 263.378 314.038 263.389 cv
235.014 263.366 mo
234.68 263.355 234.346 263.344 234.012 263.333 cv
234.045 262.334 li
234.378 262.345 234.712 262.356 235.046 262.366 cv
235.014 263.366 li
316.034 263.324 mo
316.001 262.325 li
316.334 262.314 316.666 262.303 316.999 262.292 cv
317.032 263.291 li
316.7 263.302 316.367 263.313 316.034 263.324 cv
233.01 263.3 mo
232.676 263.289 232.342 263.278 232.008 263.266 cv
232.043 262.267 li
232.376 262.278 232.71 262.29 233.044 262.301 cv
233.01 263.3 li
318.03 263.257 mo
317.996 262.257 li
318.328 262.246 318.66 262.234 318.993 262.223 cv
319.028 263.222 li
318.695 263.234 318.363 263.245 318.03 263.257 cv
231.007 263.231 mo
230.673 263.219 230.339 263.207 230.005 263.195 cv
230.041 262.196 li
230.375 262.208 230.708 262.22 231.042 262.232 cv
231.007 263.231 li
320.026 263.186 mo
319.989 262.187 li
320.322 262.175 320.654 262.163 320.986 262.15 cv
321.023 263.15 li
320.691 263.162 320.358 263.174 320.026 263.186 cv
229.003 263.159 mo
228.669 263.147 228.335 263.134 228.001 263.122 cv
228.039 262.122 li
228.373 262.135 228.706 262.147 229.04 262.159 cv
229.003 263.159 li
322.021 263.112 mo
321.983 262.113 li
322.315 262.1 322.647 262.088 322.98 262.075 cv
323.018 263.074 li
322.686 263.087 322.354 263.1 322.021 263.112 cv
227 263.083 mo
226.666 263.071 226.332 263.057 225.998 263.044 cv
226.037 262.045 li
226.371 262.058 226.704 262.071 227.038 262.084 cv
227 263.083 li
324.016 263.035 mo
323.976 262.036 li
324.308 262.023 324.64 262.009 324.973 261.996 cv
325.013 262.995 li
324.68 263.009 324.348 263.022 324.016 263.035 cv
224.996 263.004 mo
224.662 262.991 224.328 262.978 223.994 262.964 cv
224.035 261.965 li
224.369 261.978 224.702 261.992 225.036 262.005 cv
224.996 263.004 li
326.01 262.955 mo
325.969 261.956 li
326.301 261.942 326.633 261.928 326.965 261.914 cv
327.007 262.913 li
326.675 262.927 326.342 262.941 326.01 262.955 cv
222.992 262.922 mo
222.658 262.908 222.324 262.894 221.99 262.88 cv
222.033 261.881 li
222.367 261.895 222.7 261.909 223.034 261.923 cv
222.992 262.922 li
328.004 262.871 mo
327.961 261.872 li
328.293 261.858 328.625 261.843 328.958 261.829 cv
329.001 262.828 li
328.669 262.842 328.337 262.857 328.004 262.871 cv
220.988 262.837 mo
220.654 262.822 220.321 262.808 219.986 262.793 cv
220.031 261.794 li
220.364 261.809 220.698 261.823 221.032 261.838 cv
220.988 262.837 li
329.998 262.784 mo
329.954 261.785 li
330.286 261.77 330.618 261.755 330.95 261.74 cv
330.995 262.739 li
330.662 262.754 330.33 262.769 329.998 262.784 cv
218.985 262.748 mo
218.651 262.733 218.317 262.718 217.983 262.702 cv
218.029 261.703 li
218.362 261.719 218.696 261.734 219.03 261.749 cv
218.985 262.748 li
331.991 262.694 mo
331.945 261.695 li
332.277 261.679 332.609 261.664 332.941 261.649 cv
332.988 262.647 li
332.988 262.648 li
332.656 262.663 332.324 262.678 331.991 262.694 cv
216.981 262.656 mo
216.647 262.64 216.313 262.624 215.979 262.608 cv
216.027 261.61 li
216.36 261.625 216.694 261.641 217.028 261.657 cv
216.981 262.656 li
333.984 262.6 mo
333.937 261.601 li
334.269 261.586 334.601 261.57 334.932 261.553 cv
334.981 262.552 li
334.649 262.569 334.317 262.584 333.984 262.6 cv
214.977 262.56 mo
214.643 262.544 214.309 262.528 213.975 262.511 cv
214.024 261.512 li
214.358 261.529 214.692 261.545 215.025 261.561 cv
214.977 262.56 li
335.977 262.503 mo
335.928 261.505 li
336.26 261.488 336.591 261.472 336.923 261.455 cv
336.973 262.454 li
336.641 262.471 336.309 262.487 335.977 262.503 cv
212.973 262.461 mo
212.639 262.444 212.305 262.428 211.971 262.411 cv
212.022 261.412 li
212.356 261.429 212.689 261.446 213.023 261.463 cv
212.973 262.461 li
337.97 262.403 mo
337.919 261.405 li
338.25 261.388 338.582 261.371 338.914 261.353 cv
338.966 262.352 li
338.634 262.369 338.302 262.387 337.97 262.403 cv
210.969 262.359 mo
210.635 262.342 210.301 262.324 209.967 262.307 cv
210.02 261.308 li
210.354 261.326 210.687 261.343 211.021 261.36 cv
210.969 262.359 li
339.961 262.3 mo
339.909 261.301 li
340.241 261.284 340.572 261.266 340.904 261.248 cv
340.957 262.247 li
340.626 262.265 340.294 262.282 339.961 262.3 cv
208.965 262.253 mo
208.631 262.236 208.297 262.217 207.964 262.199 cv
208.018 261.201 li
208.351 261.219 208.685 261.237 209.019 261.255 cv
208.965 262.253 li
341.953 262.193 mo
341.899 261.195 li
342.23 261.177 342.562 261.159 342.894 261.14 cv
342.949 262.139 li
342.617 262.157 342.285 262.175 341.953 262.193 cv
206.962 262.144 mo
206.628 262.126 206.294 262.107 205.96 262.089 cv
206.016 261.09 li
206.349 261.109 206.683 261.128 207.017 261.146 cv
206.962 262.144 li
343.944 262.083 mo
343.888 261.085 li
344.22 261.066 344.551 261.048 344.883 261.029 cv
344.94 262.027 li
344.608 262.046 344.276 262.065 343.944 262.083 cv
204.958 262.032 mo
204.624 262.013 204.29 261.994 203.956 261.974 cv
204.014 260.976 li
204.347 260.995 204.681 261.015 205.015 261.034 cv
204.958 262.032 li
345.935 261.97 mo
345.877 260.972 li
346.209 260.953 346.54 260.933 346.872 260.914 cv
346.93 261.912 li
346.599 261.932 346.267 261.951 345.935 261.97 cv
202.954 261.916 mo
202.954 261.916 li
202.62 261.896 202.286 261.877 201.952 261.857 cv
202.011 260.859 li
202.345 260.878 202.679 260.898 203.012 260.918 cv
202.954 261.916 li
347.926 261.853 mo
347.866 260.855 li
348.198 260.835 348.529 260.815 348.86 260.795 cv
348.921 261.794 li
348.589 261.814 348.257 261.834 347.926 261.853 cv
200.95 261.797 mo
200.616 261.777 200.282 261.756 199.948 261.736 cv
200.009 260.738 li
200.343 260.758 200.677 260.778 201.01 260.799 cv
200.95 261.797 li
349.915 261.733 mo
349.854 260.735 li
350.186 260.715 350.517 260.694 350.849 260.674 cv
350.91 261.672 li
350.579 261.693 350.247 261.713 349.915 261.733 cv
198.946 261.674 mo
198.612 261.653 198.278 261.632 197.944 261.611 cv
198.007 260.613 li
198.341 260.634 198.675 260.655 199.008 260.676 cv
198.946 261.674 li
351.905 261.61 mo
351.842 260.612 li
352.174 260.591 352.505 260.57 352.836 260.549 cv
352.9 261.547 li
352.568 261.568 352.237 261.589 351.905 261.61 cv
196.943 261.548 mo
196.609 261.527 196.275 261.505 195.941 261.483 cv
196.005 260.486 li
196.339 260.507 196.672 260.529 197.006 260.55 cv
196.943 261.548 li
353.894 261.483 mo
353.83 260.485 li
354.161 260.464 354.492 260.442 354.823 260.421 cv
354.889 261.418 li
354.557 261.44 354.226 261.462 353.894 261.483 cv
194.939 261.418 mo
194.605 261.396 194.271 261.374 193.937 261.352 cv
194.003 260.354 li
194.337 260.376 194.67 260.398 195.004 260.42 cv
194.939 261.418 li
355.883 261.353 mo
355.817 260.355 li
356.148 260.333 356.479 260.311 356.81 260.289 cv
356.877 261.287 li
356.546 261.309 356.215 261.331 355.883 261.353 cv
192.935 261.285 mo
192.601 261.263 192.267 261.24 191.933 261.217 cv
192.001 260.22 li
192.335 260.242 192.669 260.265 193.002 260.287 cv
192.935 261.285 li
357.871 261.219 mo
357.804 260.222 li
358.135 260.199 358.466 260.176 358.797 260.154 cv
358.865 261.151 li
358.534 261.174 358.203 261.197 357.871 261.219 cv
190.931 261.148 mo
190.597 261.125 190.264 261.102 189.93 261.079 cv
190 260.081 li
190.333 260.105 190.666 260.128 191 260.151 cv
190.931 261.148 li
359.859 261.082 mo
359.79 260.085 li
360.121 260.062 360.451 260.038 360.782 260.015 cv
360.853 261.013 li
360.522 261.036 360.191 261.059 359.859 261.082 cv
188.928 261.008 mo
188.594 260.985 188.26 260.961 187.926 260.937 cv
187.998 259.939 li
188.331 259.963 188.665 259.987 188.999 260.011 cv
188.928 261.008 li
361.846 260.942 mo
361.775 259.945 li
362.106 259.921 362.437 259.897 362.768 259.873 cv
362.84 260.871 li
362.509 260.895 362.178 260.918 361.846 260.942 cv
186.924 260.865 mo
186.59 260.84 186.257 260.816 185.923 260.791 cv
185.996 259.794 li
186.33 259.819 186.663 259.843 186.997 259.867 cv
186.924 260.865 li
363.833 260.798 mo
363.76 259.801 li
364.091 259.777 364.422 259.752 364.753 259.728 cv
364.827 260.725 li
364.496 260.75 364.165 260.774 363.833 260.798 cv
184.921 260.717 mo
184.587 260.693 184.253 260.667 183.919 260.642 cv
183.994 259.645 li
184.328 259.67 184.661 259.695 184.995 259.72 cv
184.921 260.717 li
365.82 260.651 mo
365.745 259.654 li
366.076 259.629 366.407 259.604 366.737 259.579 cv
366.813 260.576 li
366.482 260.601 366.151 260.626 365.82 260.651 cv
182.918 260.566 mo
182.584 260.541 182.25 260.516 181.916 260.49 cv
181.993 259.493 li
182.326 259.518 182.66 259.544 182.994 259.569 cv
182.918 260.566 li
367.806 260.5 mo
367.729 259.503 li
368.06 259.478 368.391 259.452 368.721 259.427 cv
368.799 260.424 li
368.799 260.424 li
368.468 260.449 368.137 260.475 367.806 260.5 cv
180.914 260.412 mo
180.58 260.386 180.247 260.36 179.913 260.334 cv
179.991 259.337 li
180.325 259.363 180.658 259.389 180.992 259.415 cv
180.914 260.412 li
369.796 260.346 mo
369.718 259.349 li
370.05 259.323 370.382 259.297 370.714 259.27 cv
370.793 260.267 li
370.461 260.293 370.129 260.32 369.796 260.346 cv
178.911 260.254 mo
178.577 260.228 178.243 260.201 177.91 260.174 cv
177.99 259.177 li
178.324 259.204 178.657 259.231 178.991 259.257 cv
178.911 260.254 li
371.791 260.187 mo
371.71 259.19 li
372.043 259.164 372.375 259.137 372.707 259.11 cv
372.788 260.107 li
372.455 260.134 372.123 260.161 371.791 260.187 cv
176.908 260.093 mo
176.574 260.065 176.24 260.038 175.907 260.01 cv
175.989 259.014 li
176.322 259.041 176.656 259.069 176.989 259.096 cv
176.908 260.093 li
373.785 260.025 mo
373.703 259.029 li
374.035 259.001 374.367 258.974 374.699 258.946 cv
374.782 259.943 li
374.449 259.971 374.117 259.998 373.785 260.025 cv
174.905 259.927 mo
174.571 259.9 174.237 259.872 173.904 259.843 cv
173.988 258.847 li
174.321 258.875 174.654 258.903 174.988 258.931 cv
174.905 259.927 li
375.778 259.86 mo
375.695 258.863 li
376.027 258.835 376.359 258.807 376.691 258.779 cv
376.775 259.776 li
376.443 259.804 376.111 259.832 375.778 259.86 cv
172.902 259.758 mo
172.568 259.73 172.235 259.701 171.901 259.673 cv
171.987 258.676 li
172.32 258.705 172.653 258.734 172.987 258.762 cv
172.902 259.758 li
377.772 259.691 mo
377.686 258.694 li
378.018 258.666 378.35 258.637 378.682 258.608 cv
378.768 259.605 li
378.436 259.633 378.104 259.662 377.772 259.691 cv
170.9 259.586 mo
170.566 259.557 170.232 259.528 169.898 259.498 cv
169.986 258.502 li
170.319 258.531 170.653 258.561 170.986 258.59 cv
170.9 259.586 li
379.765 259.518 mo
379.678 258.522 li
380.01 258.492 380.342 258.463 380.673 258.434 cv
380.761 259.43 li
380.429 259.459 380.097 259.489 379.765 259.518 cv
168.901 259.41 mo
168.569 259.38 168.237 259.351 167.905 259.321 cv
167.994 258.325 li
168.326 258.355 168.658 258.384 168.99 258.414 cv
168.901 259.41 li
381.758 259.341 mo
381.669 258.345 li
382.001 258.316 382.332 258.286 382.664 258.256 cv
382.754 259.252 li
382.422 259.282 382.09 259.312 381.758 259.341 cv
166.908 259.231 mo
166.576 259.201 166.244 259.17 165.912 259.14 cv
166.003 258.144 li
166.335 258.175 166.667 258.205 166.999 258.235 cv
166.908 259.231 li
383.75 259.161 mo
383.659 258.166 li
383.991 258.135 384.323 258.105 384.655 258.074 cv
384.746 259.07 li
384.415 259.101 384.083 259.131 383.75 259.161 cv
164.916 259.048 mo
164.583 259.017 164.251 258.986 163.919 258.955 cv
164.013 257.96 li
164.344 257.991 164.676 258.022 165.008 258.052 cv
164.916 259.048 li
385.742 258.978 mo
385.65 257.982 li
385.982 257.951 386.313 257.92 386.645 257.889 cv
386.739 258.884 li
386.407 258.916 386.075 258.947 385.742 258.978 cv
162.923 258.862 mo
162.591 258.83 162.259 258.799 161.927 258.767 cv
162.022 257.772 li
162.354 257.803 162.685 257.835 163.017 257.866 cv
162.923 258.862 li
387.734 258.79 mo
387.64 257.795 li
387.972 257.763 388.303 257.732 388.635 257.7 cv
388.73 258.695 li
388.398 258.727 388.067 258.759 387.734 258.79 cv
160.931 258.672 mo
160.599 258.639 160.267 258.607 159.935 258.575 cv
160.032 257.58 li
160.364 257.612 160.695 257.644 161.027 257.676 cv
160.931 258.672 li
389.726 258.599 mo
389.629 257.604 li
389.961 257.572 390.293 257.539 390.624 257.507 cv
390.721 258.502 li
390.39 258.535 390.058 258.567 389.726 258.599 cv
158.939 258.478 mo
158.607 258.445 158.275 258.412 157.944 258.379 cv
158.042 257.384 li
158.374 257.417 158.705 257.45 159.037 257.482 cv
158.939 258.478 li
391.717 258.404 mo
391.619 257.409 li
391.95 257.376 392.282 257.344 392.613 257.31 cv
392.713 258.306 li
392.381 258.339 392.049 258.371 391.717 258.404 cv
156.948 258.28 mo
156.616 258.247 156.284 258.213 155.952 258.18 cv
156.053 257.185 li
156.385 257.218 156.716 257.252 157.048 257.285 cv
156.948 258.28 li
393.708 258.206 mo
393.608 257.211 li
393.939 257.177 394.271 257.144 394.602 257.11 cv
394.703 258.105 li
394.703 258.105 li
394.372 258.139 394.04 258.172 393.708 258.206 cv
154.957 258.078 mo
154.625 258.044 154.293 258.01 153.961 257.976 cv
154.064 256.981 li
154.395 257.016 154.727 257.05 155.059 257.083 cv
154.957 258.078 li
154.957 258.078 li
395.698 258.003 mo
395.596 257.009 li
395.928 256.975 396.259 256.94 396.59 256.906 cv
396.693 257.901 li
396.362 257.935 396.03 257.969 395.698 258.003 cv
152.966 257.873 mo
152.635 257.838 152.303 257.804 151.971 257.769 cv
152.076 256.774 li
152.407 256.809 152.738 256.844 153.07 256.878 cv
152.966 257.873 li
397.688 257.797 mo
397.584 256.803 li
397.916 256.768 398.247 256.733 398.578 256.698 cv
398.683 257.693 li
398.352 257.728 398.02 257.763 397.688 257.797 cv
150.976 257.664 mo
150.644 257.629 150.313 257.593 149.981 257.558 cv
150.088 256.564 li
150.419 256.599 150.75 256.634 151.082 256.669 cv
150.976 257.664 li
399.678 257.587 mo
399.572 256.593 li
399.904 256.558 400.235 256.522 400.566 256.487 cv
400.673 257.481 li
400.341 257.517 400.01 257.552 399.678 257.587 cv
148.986 257.451 mo
148.655 257.415 148.323 257.379 147.992 257.343 cv
148.1 256.349 li
148.431 256.385 148.762 256.421 149.094 256.457 cv
148.986 257.451 li
401.667 257.373 mo
401.56 256.379 li
401.891 256.343 402.222 256.307 402.553 256.271 cv
402.662 257.265 li
402.662 257.265 li
402.331 257.301 401.999 257.337 401.667 257.373 cv
146.997 257.234 mo
146.665 257.198 146.334 257.161 146.002 257.124 cv
146.113 256.13 li
146.444 256.167 146.775 256.204 147.106 256.24 cv
146.997 257.234 li
403.656 257.156 mo
403.547 256.162 li
403.878 256.125 404.209 256.089 404.54 256.052 cv
404.65 257.045 li
404.319 257.082 403.988 257.119 403.656 257.156 cv
145.008 257.013 mo
144.676 256.976 144.345 256.939 144.014 256.901 cv
144.126 255.908 li
144.457 255.945 144.788 255.982 145.119 256.019 cv
145.008 257.013 li
405.645 256.934 mo
405.533 255.941 li
405.864 255.903 406.195 255.866 406.526 255.828 cv
406.639 256.822 li
406.308 256.86 405.976 256.897 405.645 256.934 cv
143.02 256.789 mo
142.688 256.751 142.357 256.713 142.025 256.675 cv
142.14 255.681 li
142.471 255.719 142.801 255.757 143.133 255.795 cv
143.02 256.789 li
407.633 256.709 mo
407.519 255.715 li
407.85 255.677 408.181 255.639 408.512 255.601 cv
408.627 256.594 li
408.296 256.633 407.964 256.671 407.633 256.709 cv
141.032 256.56 mo
140.7 256.521 140.369 256.483 140.038 256.444 cv
140.154 255.451 li
140.485 255.49 140.816 255.528 141.147 255.567 cv
141.032 256.56 li
409.62 256.479 mo
409.505 255.486 li
409.836 255.448 410.167 255.409 410.497 255.37 cv
410.614 256.363 li
410.283 256.402 409.952 256.441 409.62 256.479 cv
139.044 256.327 mo
138.713 256.288 138.381 256.249 138.05 256.209 cv
138.169 255.216 li
138.499 255.256 138.83 255.295 139.161 255.334 cv
139.044 256.327 li
411.608 256.246 mo
411.49 255.253 li
411.821 255.214 412.152 255.174 412.482 255.135 cv
412.601 256.128 li
412.27 256.167 411.939 256.207 411.608 256.246 cv
137.057 256.091 mo
136.726 256.051 136.394 256.011 136.063 255.971 cv
136.184 254.978 li
136.514 255.018 136.845 255.058 137.176 255.098 cv
137.057 256.091 li
413.594 256.009 mo
413.475 255.016 li
413.806 254.976 414.136 254.936 414.467 254.896 cv
414.587 255.888 li
414.257 255.928 413.926 255.969 413.594 256.009 cv
135.07 255.85 mo
134.739 255.809 134.408 255.769 134.077 255.728 cv
134.199 254.736 li
134.53 254.776 134.86 254.817 135.191 254.857 cv
135.07 255.85 li
415.58 255.767 mo
415.459 254.775 li
415.79 254.734 416.12 254.693 416.451 254.652 cv
416.573 255.645 li
416.573 255.645 li
416.243 255.686 415.912 255.726 415.58 255.767 cv
133.084 255.605 mo
132.753 255.564 132.422 255.523 132.091 255.481 cv
132.215 254.489 li
132.546 254.53 132.877 254.572 133.207 254.613 cv
133.084 255.605 li
417.566 255.522 mo
417.443 254.529 li
417.773 254.488 418.104 254.447 418.434 254.405 cv
418.559 255.397 li
418.228 255.439 417.897 255.48 417.566 255.522 cv
131.098 255.356 mo
130.767 255.315 130.436 255.273 130.106 255.23 cv
130.232 254.238 li
130.562 254.281 130.893 254.323 131.224 254.364 cv
131.098 255.356 li
419.551 255.272 mo
419.426 254.28 li
419.756 254.238 420.087 254.196 420.417 254.154 cv
420.544 255.146 li
420.213 255.188 419.883 255.23 419.551 255.272 cv
129.113 255.103 mo
128.782 255.061 128.451 255.018 128.121 254.975 cv
128.249 253.984 li
128.579 254.026 128.91 254.069 129.241 254.112 cv
129.113 255.103 li
421.536 255.018 mo
421.408 254.026 li
421.739 253.984 422.069 253.941 422.4 253.898 cv
422.528 254.89 li
422.198 254.933 421.867 254.976 421.536 255.018 cv
127.128 254.846 mo
126.798 254.803 126.467 254.76 126.136 254.716 cv
126.267 253.725 li
126.597 253.768 126.927 253.812 127.258 253.855 cv
127.128 254.846 li
423.52 254.76 mo
423.39 253.769 li
423.721 253.726 424.051 253.682 424.381 253.639 cv
424.512 254.63 li
424.182 254.674 423.851 254.717 423.52 254.76 cv
125.144 254.585 mo
124.813 254.541 124.483 254.497 124.152 254.453 cv
124.285 253.462 li
124.615 253.506 124.945 253.55 125.276 253.594 cv
125.144 254.585 li
425.504 254.499 mo
425.372 253.507 li
425.702 253.463 426.033 253.419 426.363 253.375 cv
426.496 254.366 li
426.165 254.41 425.835 254.454 425.504 254.499 cv
123.161 254.319 mo
122.83 254.275 122.5 254.23 122.169 254.185 cv
122.304 253.194 li
122.634 253.239 122.964 253.284 123.294 253.328 cv
123.161 254.319 li
427.487 254.232 mo
427.353 253.241 li
427.683 253.196 428.013 253.152 428.343 253.107 cv
428.479 254.097 li
428.148 254.143 427.818 254.187 427.487 254.232 cv
121.178 254.05 mo
120.847 254.004 120.517 253.959 120.187 253.913 cv
120.323 252.923 li
120.653 252.968 120.983 253.014 121.314 253.059 cv
121.178 254.05 li
429.47 253.962 mo
429.333 252.971 li
429.664 252.926 429.994 252.88 430.323 252.834 cv
430.461 253.825 li
430.131 253.871 429.8 253.916 429.47 253.962 cv
119.195 253.776 mo
118.865 253.73 118.535 253.683 118.204 253.637 cv
118.344 252.647 li
118.673 252.693 119.003 252.739 119.333 252.785 cv
119.195 253.776 li
431.452 253.687 mo
431.313 252.696 li
431.643 252.65 431.973 252.604 432.303 252.558 cv
432.443 253.548 li
432.442 253.548 li
432.112 253.594 431.782 253.641 431.452 253.687 cv
117.214 253.497 mo
116.883 253.45 116.553 253.403 116.223 253.356 cv
116.364 252.366 li
116.694 252.413 117.024 252.46 117.354 252.507 cv
117.214 253.497 li
433.433 253.408 mo
433.293 252.418 li
433.622 252.371 433.952 252.324 434.282 252.277 cv
434.423 253.267 li
434.094 253.314 433.763 253.361 433.433 253.408 cv
115.232 253.214 mo
114.902 253.167 114.572 253.119 114.242 253.071 cv
114.386 252.082 li
114.715 252.13 115.045 252.177 115.375 252.225 cv
115.232 253.214 li
435.414 253.124 mo
435.271 252.134 li
435.601 252.087 435.931 252.039 436.26 251.991 cv
436.404 252.981 li
436.074 253.029 435.744 253.077 435.414 253.124 cv
113.252 252.927 mo
112.922 252.879 112.592 252.831 112.262 252.782 cv
112.407 251.793 li
112.737 251.841 113.067 251.89 113.396 251.938 cv
113.252 252.927 li
437.394 252.836 mo
437.249 251.847 li
437.579 251.799 437.908 251.75 438.238 251.702 cv
438.384 252.691 li
438.054 252.739 437.724 252.788 437.394 252.836 cv
111.272 252.636 mo
110.942 252.587 110.612 252.538 110.282 252.488 cv
110.43 251.499 li
110.76 251.549 111.089 251.598 111.419 251.647 cv
111.272 252.636 li
439.374 252.544 mo
439.226 251.555 li
439.556 251.506 439.885 251.457 440.215 251.407 cv
440.363 252.396 li
440.033 252.446 439.704 252.495 439.374 252.544 cv
109.293 252.34 mo
108.963 252.29 108.633 252.24 108.303 252.19 cv
108.453 251.201 li
108.783 251.251 109.112 251.301 109.442 251.351 cv
109.293 252.34 li
441.352 252.247 mo
441.203 251.259 li
441.532 251.209 441.862 251.159 442.191 251.109 cv
442.341 252.097 li
442.012 252.147 441.682 252.197 441.352 252.247 cv
107.314 252.039 mo
107.314 252.039 li
106.984 251.989 106.654 251.938 106.325 251.887 cv
106.478 250.899 li
106.806 250.95 107.136 251 107.465 251.051 cv
107.314 252.039 li
443.331 251.946 mo
443.179 250.958 li
443.508 250.907 443.837 250.856 444.167 250.806 cv
444.319 251.794 li
443.99 251.845 443.66 251.895 443.331 251.946 cv
105.336 251.734 mo
105.006 251.683 104.677 251.631 104.347 251.58 cv
104.502 250.592 li
104.831 250.644 105.16 250.695 105.49 250.746 cv
105.336 251.734 li
445.308 251.64 mo
445.154 250.652 li
445.483 250.601 445.813 250.549 446.141 250.498 cv
446.297 251.486 li
445.967 251.537 445.638 251.589 445.308 251.64 cv
103.359 251.424 mo
103.029 251.372 102.7 251.32 102.371 251.268 cv
102.528 250.28 li
102.856 250.333 103.186 250.385 103.515 250.437 cv
103.359 251.424 li
447.285 251.33 mo
447.129 250.342 li
447.458 250.29 447.787 250.238 448.116 250.185 cv
448.273 251.173 li
447.944 251.225 447.614 251.278 447.285 251.33 cv
101.382 251.11 mo
101.053 251.057 100.724 251.004 100.395 250.951 cv
100.554 249.964 li
100.883 250.017 101.212 250.07 101.541 250.123 cv
101.382 251.11 li
449.261 251.015 mo
449.102 250.027 li
449.431 249.974 449.76 249.921 450.089 249.868 cv
450.249 250.855 li
449.92 250.909 449.591 250.962 449.261 251.015 cv
99.4067 250.791 mo
99.0773 250.738 98.7482 250.684 98.4191 250.63 cv
98.5808 249.643 li
98.9094 249.697 99.2382 249.751 99.5673 249.804 cv
99.4067 250.791 li
451.236 250.695 mo
451.075 249.708 li
451.404 249.654 451.733 249.6 452.062 249.546 cv
452.224 250.533 li
451.895 250.587 451.566 250.641 451.236 250.695 cv
97.4318 250.467 mo
97.4317 250.467 li
97.1024 250.413 96.7735 250.359 96.4445 250.304 cv
96.6087 249.317 li
96.937 249.372 97.2656 249.427 97.5947 249.481 cv
97.4318 250.467 li
453.211 250.37 mo
453.048 249.384 li
453.376 249.329 453.705 249.275 454.033 249.22 cv
454.198 250.206 li
453.869 250.261 453.54 250.316 453.211 250.37 cv
95.4576 250.139 mo
95.1283 250.084 94.7996 250.029 94.4706 249.973 cv
94.6372 248.987 li
94.9656 249.042 95.294 249.098 95.6228 249.153 cv
95.4576 250.139 li
455.185 250.041 mo
455.019 249.055 li
455.348 249 455.676 248.944 456.004 248.889 cv
456.171 249.875 li
455.843 249.93 455.514 249.986 455.185 250.041 cv
93.4841 249.806 mo
93.155 249.75 92.8262 249.694 92.4976 249.637 cv
92.6667 248.652 li
92.9947 248.708 93.3232 248.764 93.6518 248.82 cv
93.4841 249.806 li
457.158 249.707 mo
456.99 248.721 li
457.318 248.665 457.647 248.609 457.975 248.552 cv
458.144 249.538 li
457.815 249.594 457.487 249.651 457.158 249.707 cv
91.5114 249.468 mo
91.1825 249.411 90.854 249.354 90.5255 249.297 cv
90.6969 248.312 li
91.0249 248.369 91.3531 248.425 91.6816 248.482 cv
91.5114 249.468 li
459.13 249.368 mo
458.959 248.383 li
459.288 248.326 459.616 248.269 459.944 248.211 cv
460.116 249.196 li
459.787 249.254 459.459 249.311 459.13 249.368 cv
89.5396 249.125 mo
89.2109 249.067 88.8825 249.009 88.5541 248.951 cv
88.7279 247.967 li
89.0558 248.024 89.3839 248.082 89.7123 248.14 cv
89.5396 249.125 li
461.101 249.024 mo
460.928 248.039 li
461.257 247.981 461.585 247.923 461.912 247.865 cv
462.087 248.85 li
461.759 248.908 461.43 248.966 461.101 249.024 cv
87.5688 248.777 mo
87.2402 248.718 86.9117 248.66 86.5835 248.601 cv
86.76 247.617 li
87.0877 247.675 87.4156 247.734 87.7439 247.792 cv
87.5688 248.777 li
463.072 248.675 mo
462.896 247.691 li
463.224 247.632 463.552 247.573 463.88 247.514 cv
464.057 248.499 li
463.729 248.558 463.4 248.616 463.072 248.675 cv
85.5987 248.424 mo
85.2702 248.364 84.9421 248.305 84.6141 248.245 cv
84.793 247.261 li
85.1205 247.321 85.4482 247.38 85.7764 247.44 cv
85.5987 248.424 li
465.042 248.321 mo
464.863 247.337 li
465.191 247.278 465.519 247.218 465.847 247.158 cv
466.026 248.142 li
465.698 248.202 465.37 248.262 465.042 248.321 cv
83.6296 248.066 mo
83.3012 248.006 82.9732 247.945 82.6454 247.885 cv
82.8269 246.901 li
83.1541 246.962 83.4818 247.022 83.8097 247.082 cv
83.6296 248.066 li
467.01 247.962 mo
466.83 246.978 li
467.158 246.918 467.485 246.858 467.812 246.797 cv
467.994 247.781 li
467.667 247.841 467.339 247.902 467.01 247.962 cv
81.6615 247.703 mo
81.3332 247.642 81.0053 247.58 80.6776 247.519 cv
80.8617 246.536 li
81.1888 246.597 81.5164 246.658 81.8441 246.719 cv
81.6615 247.703 li
468.978 247.598 mo
468.795 246.615 li
469.123 246.554 469.45 246.492 469.777 246.431 cv
469.962 247.414 li
469.634 247.475 469.306 247.537 468.978 247.598 cv
79.6942 247.334 mo
79.3661 247.272 79.0384 247.21 78.7109 247.148 cv
78.8975 246.166 li
79.2246 246.228 79.5518 246.29 79.8795 246.352 cv
79.6942 247.334 li
470.945 247.228 mo
470.759 246.246 li
471.087 246.184 471.414 246.122 471.741 246.059 cv
471.928 247.042 li
471.601 247.104 471.273 247.166 470.945 247.228 cv
77.7279 246.961 mo
77.3999 246.898 77.0723 246.835 76.7451 246.772 cv
76.9343 245.79 li
77.2613 245.853 77.5883 245.916 77.9157 245.979 cv
77.7279 246.961 li
472.911 246.854 mo
472.723 245.871 li
473.05 245.809 473.377 245.746 473.704 245.682 cv
473.894 246.664 li
473.566 246.727 473.239 246.791 472.911 246.854 cv
75.7626 246.582 mo
75.4349 246.518 75.1075 246.455 74.7803 246.391 cv
74.9722 245.409 li
75.2989 245.473 75.6258 245.537 75.9532 245.6 cv
75.7626 246.582 li
474.876 246.474 mo
474.685 245.492 li
475.012 245.428 475.339 245.364 475.665 245.3 cv
475.858 246.282 li
475.531 246.346 475.204 246.41 474.876 246.474 cv
73.7984 246.198 mo
73.7982 246.198 li
73.4708 246.133 73.1436 246.069 72.8165 246.004 cv
73.0112 245.023 li
73.3377 245.088 73.6645 245.152 73.9916 245.217 cv
73.7984 246.198 li
476.84 246.088 mo
476.646 245.107 li
476.973 245.043 477.3 244.978 477.626 244.913 cv
477.821 245.893 li
477.495 245.958 477.167 246.023 476.84 246.088 cv
71.835 245.808 mo
71.5076 245.743 71.1807 245.677 70.8538 245.612 cv
71.0511 244.631 li
71.3774 244.697 71.7041 244.762 72.031 244.828 cv
71.835 245.808 li
478.803 245.697 mo
478.606 244.717 li
478.933 244.651 479.259 244.586 479.586 244.52 cv
479.784 245.5 li
479.457 245.566 479.13 245.632 478.803 245.697 cv
69.8728 245.413 mo
69.5456 245.347 69.2188 245.281 68.8921 245.214 cv
69.0923 244.234 li
69.4183 244.301 69.7448 244.367 70.0715 244.433 cv
69.8728 245.413 li
480.764 245.301 mo
480.565 244.321 li
480.892 244.254 481.218 244.188 481.544 244.121 cv
481.745 245.101 li
481.418 245.167 481.092 245.234 480.764 245.301 cv
67.9118 245.013 mo
67.5847 244.946 67.2581 244.878 66.9316 244.811 cv
67.1345 243.831 li
67.4605 243.899 67.7867 243.966 68.1133 244.033 cv
67.9118 245.013 li
482.725 244.899 mo
482.523 243.92 li
482.849 243.852 483.175 243.785 483.501 243.717 cv
483.705 244.696 li
483.705 244.696 li
483.379 244.764 483.052 244.831 482.725 244.899 cv
65.9519 244.607 mo
65.6251 244.539 65.2986 244.47 64.9723 244.402 cv
65.1781 243.423 li
65.5038 243.492 65.8298 243.56 66.1561 243.628 cv
65.9519 244.607 li
484.685 244.491 mo
484.479 243.512 li
484.806 243.444 485.131 243.376 485.457 243.307 cv
485.664 244.285 li
485.338 244.354 485.011 244.423 484.685 244.491 cv
63.9931 244.195 mo
63.6664 244.126 63.34 244.057 63.0142 243.987 cv
63.2228 243.009 li
63.5482 243.079 63.874 243.148 64.2002 243.217 cv
63.9931 244.195 li
486.643 244.078 mo
486.435 243.1 li
486.761 243.03 487.086 242.961 487.412 242.891 cv
487.622 243.869 li
487.296 243.939 486.97 244.008 486.643 244.078 cv
62.0355 243.778 mo
61.709 243.708 61.383 243.637 61.0572 243.567 cv
61.2685 242.589 li
61.5939 242.66 61.9195 242.73 62.2455 242.8 cv
62.0355 243.778 li
488.6 243.659 mo
488.389 242.681 li
488.715 242.611 489.04 242.54 489.366 242.47 cv
489.578 243.447 li
489.252 243.518 488.926 243.588 488.6 243.659 cv
60.0791 243.354 mo
59.7529 243.283 59.4271 243.212 59.1014 243.141 cv
59.3158 242.164 li
59.6409 242.235 59.9663 242.306 60.292 242.377 cv
60.0791 243.354 li
490.556 243.234 mo
490.342 242.257 li
490.668 242.185 490.993 242.114 491.318 242.042 cv
491.533 243.019 li
491.208 243.09 490.882 243.162 490.556 243.234 cv
58.1241 242.925 mo
57.7979 242.853 57.4724 242.781 57.147 242.709 cv
57.3643 241.732 li
57.6893 241.805 58.0143 241.877 58.3399 241.949 cv
58.1241 242.925 li
492.51 242.802 mo
492.294 241.826 li
492.619 241.754 492.944 241.681 493.269 241.609 cv
493.487 242.585 li
493.162 242.657 492.836 242.73 492.51 242.802 cv
56.1703 242.49 mo
55.8444 242.417 55.519 242.344 55.1938 242.271 cv
55.4142 241.295 li
55.7388 241.368 56.0638 241.442 56.389 241.515 cv
56.1703 242.49 li
494.464 242.365 mo
494.244 241.39 li
494.569 241.316 494.894 241.243 495.218 241.169 cv
495.44 242.145 li
495.115 242.218 494.789 242.292 494.464 242.365 cv
54.2177 242.049 mo
53.8922 241.975 53.5671 241.901 53.242 241.826 cv
53.4655 240.852 li
53.7898 240.926 54.1145 241 54.4397 241.074 cv
54.2177 242.049 li
496.416 241.922 mo
496.192 240.947 li
496.517 240.873 496.842 240.798 497.166 240.724 cv
497.391 241.698 li
497.066 241.773 496.741 241.848 496.416 241.922 cv
52.2666 241.602 mo
51.9412 241.527 51.6162 241.452 51.2916 241.376 cv
51.518 240.402 li
51.8422 240.478 52.1667 240.553 52.4916 240.628 cv
52.2666 241.602 li
498.366 241.473 mo
498.14 240.498 li
498.465 240.423 498.789 240.348 499.113 240.272 cv
499.341 241.245 li
499.341 241.245 li
499.016 241.321 498.691 241.397 498.366 241.473 cv
50.3169 241.149 mo
49.9917 241.073 49.6671 240.996 49.3426 240.92 cv
49.5722 239.946 li
49.8961 240.023 50.2202 240.099 50.5449 240.175 cv
50.3169 241.149 li
500.315 241.017 mo
500.086 240.043 li
500.41 239.967 500.734 239.891 501.058 239.814 cv
501.289 240.787 li
500.965 240.863 500.64 240.94 500.315 241.017 cv
48.3687 240.689 mo
48.0437 240.612 47.7193 240.535 47.3951 240.457 cv
47.6278 239.485 li
47.9514 239.562 48.2754 239.639 48.5999 239.716 cv
48.3687 240.689 li
502.263 240.555 mo
502.03 239.582 li
502.354 239.505 502.678 239.427 503.002 239.349 cv
503.236 240.321 li
502.912 240.399 502.587 240.477 502.263 240.555 cv
46.4218 240.223 mo
46.0959 240.145 45.7705 240.066 45.4453 239.987 cv
45.6812 239.015 li
46.0059 239.094 46.3308 239.173 46.6562 239.251 cv
46.4218 240.223 li
504.209 240.086 mo
503.973 239.114 li
504.297 239.036 504.62 238.957 504.944 238.878 cv
505.181 239.849 li
504.857 239.928 504.533 240.007 504.209 240.086 cv
44.47 239.749 mo
44.1449 239.67 43.8204 239.59 43.4961 239.51 cv
43.7353 238.539 li
44.059 238.619 44.3832 238.699 44.7076 238.778 cv
44.47 239.749 li
506.153 239.611 mo
505.914 238.64 li
506.238 238.56 506.561 238.48 506.884 238.4 cv
507.125 239.371 li
506.801 239.451 506.477 239.531 506.153 239.611 cv
42.5236 239.27 mo
42.5234 239.27 li
42.1993 239.189 41.8757 239.109 41.5523 239.028 cv
41.7947 238.058 li
42.1175 238.138 42.4408 238.219 42.7645 238.299 cv
42.5236 239.27 li
508.096 239.129 mo
507.853 238.159 li
508.177 238.078 508.5 237.997 508.823 237.916 cv
509.067 238.885 li
508.744 238.967 508.42 239.048 508.096 239.129 cv
40.5801 238.784 mo
40.2555 238.702 39.9316 238.62 39.6082 238.538 cv
39.8541 237.569 li
40.1769 237.651 40.5003 237.733 40.8242 237.814 cv
40.5801 238.784 li
510.037 238.64 mo
509.791 237.671 li
510.114 237.589 510.437 237.507 510.759 237.424 cv
511.007 238.393 li
510.684 238.476 510.361 238.558 510.037 238.64 cv
38.6368 238.291 mo
38.3126 238.208 37.9889 238.125 37.6658 238.042 cv
37.9153 237.073 li
38.2378 237.156 38.5608 237.239 38.8844 237.322 cv
38.6368 238.291 li
511.977 238.145 mo
511.727 237.176 li
512.05 237.093 512.372 237.01 512.694 236.926 cv
512.946 237.894 li
512.623 237.978 512.3 238.061 511.977 238.145 cv
36.6953 237.791 mo
36.3713 237.707 36.0479 237.623 35.7251 237.538 cv
35.9781 236.571 li
36.3003 236.655 36.623 236.739 36.9464 236.823 cv
36.6953 237.791 li
36.6953 237.791 li
513.914 237.642 mo
513.661 236.674 li
513.984 236.59 514.306 236.506 514.628 236.421 cv
514.882 237.388 li
514.56 237.473 514.237 237.558 513.914 237.642 cv
34.7555 237.284 mo
34.4319 237.198 34.1088 237.113 33.7864 237.027 cv
34.0429 236.061 li
34.3648 236.146 34.6872 236.231 35.0103 236.317 cv
34.7555 237.284 li
515.85 237.132 mo
515.594 236.166 li
515.916 236.08 516.238 235.995 516.559 235.909 cv
516.817 236.875 li
516.495 236.961 516.173 237.047 515.85 237.132 cv
32.8177 236.769 mo
32.4943 236.683 32.1715 236.596 31.8495 236.509 cv
32.1097 235.544 li
32.4311 235.63 32.7533 235.717 33.0761 235.803 cv
32.8177 236.769 li
517.784 236.615 mo
517.524 235.65 li
517.846 235.563 518.167 235.476 518.489 235.389 cv
518.75 236.354 li
518.75 236.354 li
518.429 236.441 518.107 236.528 517.784 236.615 cv
30.8817 236.247 mo
30.5586 236.16 30.2363 236.072 29.9144 235.984 cv
30.1784 235.019 li
30.4996 235.107 30.8213 235.195 31.1438 235.282 cv
30.8817 236.247 li
519.716 236.091 mo
519.452 235.126 li
519.774 235.039 520.095 234.95 520.416 234.862 cv
520.681 235.826 li
520.36 235.915 520.038 236.003 519.716 236.091 cv
28.9478 235.718 mo
28.625 235.629 28.303 235.54 27.9814 235.451 cv
28.2493 234.487 li
28.5701 234.576 28.8915 234.665 29.2135 234.754 cv
28.9478 235.718 li
521.646 235.559 mo
521.379 234.596 li
521.7 234.507 522.021 234.417 522.341 234.327 cv
522.61 235.291 li
522.289 235.38 521.968 235.47 521.646 235.559 cv
27.0158 235.181 mo
26.6935 235.091 26.3718 235 26.0507 234.91 cv
26.3223 233.947 li
26.6428 234.038 26.9637 234.128 27.2854 234.218 cv
27.0158 235.181 li
523.574 235.02 mo
523.303 234.057 li
523.624 233.967 523.944 233.876 524.264 233.786 cv
524.537 234.747 li
524.217 234.838 523.896 234.929 523.574 235.02 cv
25.086 234.636 mo
24.764 234.545 24.4426 234.453 24.1219 234.361 cv
24.3975 233.4 li
24.7176 233.492 25.0382 233.583 25.3596 233.675 cv
25.086 234.636 li
525.5 234.473 mo
525.225 233.511 li
525.545 233.42 525.865 233.328 526.185 233.236 cv
526.462 234.196 li
526.462 234.196 li
526.142 234.289 525.821 234.381 525.5 234.473 cv
23.1583 234.084 mo
22.8368 233.991 22.5158 233.898 22.1955 233.805 cv
22.4751 232.844 li
22.7947 232.938 23.115 233.03 23.4359 233.123 cv
23.1583 234.084 li
527.424 233.918 mo
527.144 232.958 li
527.464 232.865 527.784 232.771 528.103 232.678 cv
528.385 233.637 li
528.065 233.731 527.744 233.825 527.424 233.918 cv
21.2331 233.523 mo
20.9117 233.429 20.5912 233.334 20.2712 233.24 cv
20.555 232.281 li
20.8742 232.375 21.1941 232.47 21.5147 232.564 cv
21.2331 233.523 li
529.345 233.355 mo
529.062 232.396 li
529.381 232.301 529.7 232.207 530.019 232.112 cv
530.305 233.07 li
530.305 233.07 li
529.985 233.165 529.665 233.26 529.345 233.355 cv
19.3101 232.954 mo
18.9893 232.859 18.6691 232.763 18.3496 232.667 cv
18.6375 231.709 li
18.9563 231.805 19.2757 231.9 19.5958 231.996 cv
19.3101 232.954 li
531.264 232.784 mo
530.977 231.826 li
531.296 231.73 531.615 231.634 531.933 231.538 cv
532.223 232.495 li
531.903 232.592 531.584 232.688 531.264 232.784 cv
17.3897 232.377 mo
17.0692 232.28 16.7493 232.182 16.4302 232.085 cv
16.7224 231.129 li
17.0407 231.226 17.3598 231.323 17.6795 231.42 cv
17.3897 232.377 li
533.18 232.204 mo
532.889 231.248 li
533.208 231.151 533.526 231.053 533.844 230.956 cv
534.138 231.912 li
533.819 232.009 533.5 232.107 533.18 232.204 cv
15.4717 231.791 mo
15.1515 231.692 14.8323 231.594 14.5136 231.495 cv
14.8101 230.54 li
15.128 230.638 15.4466 230.737 15.7659 230.835 cv
15.4717 231.791 li
535.094 231.617 mo
534.799 230.661 li
535.117 230.563 535.435 230.464 535.752 230.365 cv
536.05 231.319 li
535.732 231.419 535.414 231.518 535.094 231.617 cv
13.5563 231.196 mo
13.2366 231.096 12.9178 230.996 12.5996 230.896 cv
12.9006 229.942 li
13.218 230.042 13.5362 230.142 13.855 230.242 cv
13.5563 231.196 li
537.006 231.02 mo
536.706 230.066 li
537.024 229.966 537.341 229.866 537.658 229.765 cv
537.797 230.203 li
537.147 230.854 li
537.239 230.946 li
537.161 230.971 537.084 230.995 537.006 231.02 cv
11.6446 230.593 mo
11.5523 230.564 11.46 230.534 11.3678 230.505 cv
11.6717 229.552 li
11.7636 229.581 11.8557 229.611 11.9479 229.64 cv
11.6446 230.593 li
0 0 0 .2 cmyk
f
538.859 224.152 mo
577.725 264.247 li
577.006 264.943 li
538.141 224.848 li
538.859 224.152 li
0 0 0 1 cmyk
f
576.372 265.072 mo
506.858 286.892 410.581 298 313.879 298.001 cv
230.541 298 146.894 289.749 79.8019 272.967 cv
69.6353 270.424 60.0033 267.717 50.9545 264.86 cv
51.2556 263.906 li
60.2831 266.756 69.8957 269.458 80.0446 271.997 cv
147.024 288.752 230.608 297.002 313.879 297.001 cv
410.502 297.002 506.713 285.893 576.072 264.118 cv
576.372 265.072 li
f
576.96 269.719 mo
507.429 291.766 410.875 303 313.873 303.001 cv
230.829 303 147.465 294.766 80.4615 278.005 cv
69.8311 275.346 59.7815 272.507 50.3678 269.505 cv
50.6717 268.552 li
60.063 271.548 70.0924 274.381 80.7042 277.035 cv
147.595 293.769 230.896 302.002 313.873 302.001 cv
410.795 302.002 507.283 290.767 576.658 268.765 cv
576.96 269.719 li
576.96 269.719 li
f
[] 0 dsh
50.5 264.5 mo
50.5001 269.129 li
@
577 264.5 mo
577 269.129 li
576 269.129 li
576 264.5 li
577 264.5 li
f
11.5 224.5 mo
11.5001 230.161 li
@
539 229.5 mo
538 229.5 li
538 228.5 li
539 228.5 li
539 229.5 li
539 227.5 mo
538 227.5 li
538 226.5 li
539 226.5 li
539 227.5 li
538.773 225.5 mo
538 225.5 li
538 224.5 li
538.5 224.5 li
538.141 224.848 li
538.773 225.5 li
0 0 0 .2 cmyk
f
539 225.5 mo
538.773 225.5 li
538.141 224.848 li
538.5 224.5 li
539 224.5 li
539 225.5 li
0 0 0 1 cmyk
f
11.5 230.5 mo
50.3656 269.563 li
@
12.5 224.5 mo
51.3656 264.595 li
@
575.463 269.142 mo
575.344 269.023 li
576 268.367 li
576 268.973 li
575.822 269.03 575.642 269.086 575.463 269.142 cv
0 0 0 .2 cmyk
f
576.052 269.73 mo
575.463 269.142 li
575.642 269.086 575.822 269.03 576 268.973 cv
576 269.129 li
576.653 269.129 li
576.052 269.73 li
0 0 0 1 cmyk
f
574.637 268.317 mo
573.929 267.61 li
574.636 266.902 li
575.344 267.609 li
574.637 268.317 li
573.222 266.903 mo
572.566 266.248 li
572.928 266.138 573.29 266.027 573.65 265.917 cv
573.929 266.196 li
573.222 266.903 li
0 0 0 .2 cmyk
f
572.566 266.248 mo
572.515 266.196 li
573.221 265.489 li
573.65 265.917 li
573.29 266.027 572.928 266.138 572.566 266.248 cv
0 0 0 1 cmyk
f
571.764 265.446 mo
571.318 265 li
571.498 265 li
571.498 264.384 li
571.807 264.075 li
572.514 264.782 li
571.888 265.409 li
571.845 265.422 571.807 265.433 571.764 265.446 cv
0 0 0 .2 cmyk
f
571.498 265 mo
571.318 265 li
571.1 264.782 li
571.498 264.384 li
571.498 265 li
0 0 0 1 cmyk
f
571.807 265.489 mo
571.764 265.446 li
571.807 265.433 571.845 265.422 571.888 265.409 cv
571.807 265.489 li
f
570.468 264 mo
570.317 264 li
569.685 263.369 li
570.392 262.661 li
571.099 263.368 li
570.468 264 li
0 0 0 .2 cmyk
f
570.393 264.075 mo
570.317 264 li
570.468 264 li
570.393 264.075 li
0 0 0 1 cmyk
f
568.978 262.662 mo
568.271 261.955 li
568.977 261.248 li
569.685 261.954 li
568.978 262.662 li
567.563 261.248 mo
566.856 260.541 li
567.563 259.834 li
568.27 260.541 li
567.563 261.248 li
566.148 259.834 mo
565.441 259.128 li
566.148 258.42 li
566.855 259.127 li
566.148 259.834 li
564.734 258.421 mo
564.026 257.714 li
564.733 257.007 li
565.44 257.713 li
564.734 258.421 li
563.319 257.007 mo
562.612 256.3 li
563.318 255.593 li
564.026 256.3 li
563.319 257.007 li
561.904 255.593 mo
561.197 254.886 li
561.904 254.179 li
562.611 254.886 li
561.904 255.593 li
560.49 254.18 mo
559.782 253.473 li
560.489 252.765 li
561.196 253.472 li
560.49 254.18 li
559.075 252.766 mo
558.367 252.059 li
559.074 251.352 li
559.782 252.059 li
559.075 252.766 li
557.66 251.352 mo
556.953 250.645 li
557.66 249.938 li
558.367 250.645 li
557.66 251.352 li
556.245 249.939 mo
555.538 249.232 li
556.245 248.524 li
556.952 249.231 li
556.245 249.939 li
554.831 248.525 mo
554.123 247.818 li
554.83 247.111 li
555.537 247.818 li
554.831 248.525 li
553.416 247.111 mo
552.708 246.404 li
553.415 245.697 li
554.123 246.404 li
553.416 247.111 li
552.001 245.697 mo
551.294 244.991 li
552.001 244.283 li
552.708 244.99 li
552.001 245.697 li
550.586 244.284 mo
549.879 243.577 li
550.586 242.87 li
551.293 243.576 li
550.586 244.284 li
549.172 242.87 mo
548.464 242.163 li
549.171 241.456 li
549.879 242.163 li
549.172 242.87 li
547.757 241.456 mo
547.05 240.75 li
547.756 240.042 li
548.464 240.749 li
547.757 241.456 li
546.342 240.043 mo
545.635 239.336 li
546.342 238.628 li
547.049 239.335 li
546.342 240.043 li
544.928 238.629 mo
544.22 237.922 li
544.927 237.215 li
545.634 237.922 li
544.928 238.629 li
543.513 237.215 mo
542.805 236.508 li
543.512 235.801 li
544.22 236.508 li
543.513 237.215 li
542.098 235.802 mo
541.391 235.095 li
542.098 234.387 li
542.805 235.094 li
542.098 235.802 li
540.683 234.388 mo
539.976 233.681 li
540.683 232.974 li
541.39 233.681 li
540.683 234.388 li
539.269 232.974 mo
538.561 232.267 li
539.268 231.56 li
539.975 232.267 li
539.269 232.974 li
537.854 231.561 mo
537.239 230.946 li
537.48 230.871 537.72 230.795 537.96 230.719 cv
537.96 230.719 li
537.797 230.203 li
537.853 230.146 li
538.561 230.853 li
537.854 231.561 li
0 0 0 .2 cmyk
f
537.239 230.946 mo
537.147 230.854 li
537.797 230.203 li
537.96 230.719 li
537.96 230.719 li
537.72 230.795 537.48 230.871 537.239 230.946 cv
0 0 0 .360784 cmyk
f
576.653 269.129 mo
576 269.129 li
576 268.973 li
576 268.367 li
576.051 268.316 li
576.758 269.023 li
576.653 269.129 li
0 0 0 1 cmyk
f
[8 3 1 3 1 3 ] 0 dsh
12.5 224.5 mo
538.953 224.5 li
@
297 249.5 mo
298 249.5 li
298 253.164 li
299.5 253.164 li
297.5 257.164 li
295.5 253.164 li
297 253.164 li
cp
297 245.5 mo
298 245.5 li
298 246.5 li
297 246.5 li
cp
298 238.5 mo
298 242.5 li
297 242.5 li
297 238.5 li
cp
298 234.5 mo
298 235.5 li
297 235.5 li
297 234.5 li
cp
297.5 224.5 mo
299.5 228.5 li
298 228.5 li
298 231.5 li
297 231.5 li
297 228.5 li
295.5 228.5 li
cp
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: LWYAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginRSIYVB+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D203065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A36815EA1CE5876FAC4F83CDFE1BD4A> |-systemdict /gcheck known {setglobal} if end {end} ifendRSIYVB+TimesNewRomanPSMT /Encoding getdup 100 /d putpop%ADOEndSubsetFont
/RSIYVB+TimesNewRomanPSMT*1 [76{/.notdef}rp /L 21{/.notdef}rp /b /.notdef /d 3{/.notdef}rp /h 15{/.notdef}rp /x /y /z 133{/.notdef}rp]RSIYVB+TimesNewRomanPSMT nfRSIYVB+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf282.786 243.848 mo(d)sh550.5 192.5 mo
25.4999 192.5 li
25.4999 151.5 li
550.5 151.5 li
550.5 192.5 li
0 0 0 .331057 cmyk
f
[] 0 dsh
25.5 151.5 mo
550.5 151.5 li
550.5 192.5 li
25.5 192.5 li
cp
0 0 0 1 cmyk
@
44 151.5 mo
44.0001 186.027 li
46.5001 186.027 li
43.5001 192.027 li
40.5001 186.027 li
43.0001 186.027 li
43 151.5 li
cp
f
66 151.5 mo
66.0001 186.027 li
68.5001 186.027 li
65.5001 192.027 li
62.5001 186.027 li
65.0001 186.027 li
65 151.5 li
cp
f
86 151.5 mo
86.0001 186.027 li
88.5001 186.027 li
85.5001 192.027 li
82.5001 186.027 li
85.0001 186.027 li
85 151.5 li
cp
f
108 151.5 mo
108 186.027 li
110.5 186.027 li
107.5 192.027 li
104.5 186.027 li
107 186.027 li
107 151.5 li
cp
f
128 151.5 mo
128 186.027 li
130.5 186.027 li
127.5 192.027 li
124.5 186.027 li
127 186.027 li
127 151.5 li
cp
f
150 151.5 mo
150 186.027 li
152.5 186.027 li
149.5 192.027 li
146.5 186.027 li
149 186.027 li
149 151.5 li
cp
f
170 151.5 mo
170 186.027 li
172.5 186.027 li
169.5 192.027 li
166.5 186.027 li
169 186.027 li
169 151.5 li
cp
f
192 151.5 mo
192 186.027 li
194.5 186.027 li
191.5 192.027 li
188.5 186.027 li
191 186.027 li
191 151.5 li
cp
f
214 151.5 mo
214 186.027 li
216.5 186.027 li
213.5 192.027 li
210.5 186.027 li
213 186.027 li
213 151.5 li
cp
f
235 151.5 mo
235 186.027 li
237.5 186.027 li
234.5 192.027 li
231.5 186.027 li
234 186.027 li
234 151.5 li
cp
f
255 151.5 mo
255 186.027 li
257.5 186.027 li
254.5 192.027 li
251.5 186.027 li
254 186.027 li
254 151.5 li
cp
f
277 151.5 mo
277 186.027 li
279.5 186.027 li
276.5 192.027 li
273.5 186.027 li
276 186.027 li
276 151.5 li
cp
f
298 151.5 mo
298 186.027 li
300.5 186.027 li
297.5 192.027 li
294.5 186.027 li
297 186.027 li
297 151.5 li
cp
f
319 151.5 mo
319 186.027 li
321.5 186.027 li
318.5 192.027 li
315.5 186.027 li
318 186.027 li
318 151.5 li
cp
f
339 151.5 mo
339 186.027 li
341.5 186.027 li
338.5 192.027 li
335.5 186.027 li
338 186.027 li
338 151.5 li
cp
f
361 151.5 mo
361 186.027 li
363.5 186.027 li
360.5 192.027 li
357.5 186.027 li
360 186.027 li
360 151.5 li
cp
f
383 151.5 mo
383 186.027 li
385.5 186.027 li
382.5 192.027 li
379.5 186.027 li
382 186.027 li
382 151.5 li
cp
f
404 151.5 mo
404 186.027 li
406.5 186.027 li
403.5 192.027 li
400.5 186.027 li
403 186.027 li
403 151.5 li
cp
f
424 151.5 mo
424 186.027 li
426.5 186.027 li
423.5 192.027 li
420.5 186.027 li
423 186.027 li
423 151.5 li
cp
f
446 151.5 mo
446 186.027 li
448.5 186.027 li
445.5 192.027 li
442.5 186.027 li
445 186.027 li
445 151.5 li
cp
f
467 151.5 mo
467 186.027 li
469.5 186.027 li
466.5 192.027 li
463.5 186.027 li
466 186.027 li
466 151.5 li
cp
f
488 151.5 mo
488 186.027 li
490.5 186.027 li
487.5 192.027 li
484.5 186.027 li
487 186.027 li
487 151.5 li
cp
f
508 151.5 mo
508 186.027 li
510.5 186.027 li
507.5 192.027 li
504.5 186.027 li
507 186.027 li
507 151.5 li
cp
f
530 151.5 mo
530 186.027 li
532.5 186.027 li
529.5 192.027 li
526.5 186.027 li
529 186.027 li
529 151.5 li
cp
f
26 151.5 mo
26.0001 186.027 li
28.5001 186.027 li
25.5001 192.027 li
22.5001 186.027 li
25.0001 186.027 li
25 151.5 li
cp
f
551 151.5 mo
551 186.027 li
553.5 186.027 li
550.5 192.027 li
547.5 186.027 li
550 186.027 li
550 151.5 li
cp
f
25.4999 148.5 mo
25.4999 140.216 26.6192 133.5 27.9998 133.5 cv
285.5 133.5 li
286.881 133.5 288 126.784 288 118.5 cv
288 126.784 289.119 133.5 290.5 133.5 cv
548 133.5 li
549.381 133.5 550.5 140.216 550.5 148.501 cv
@
%ADOBeginSubsetFont: LWYAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginRSIYVB+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/q <1C60D8A8C9B7A73DB694895DD5E49D3BBCEE95B381618ED0718BA1F35CD39E95BCBD1002A9F89110DE3E7AD181B368295D0F054E6A3D9A7267329EB95AB813B7AE1696D9C600AC6A6B00419AEBFBF715793C3A2F30373AE9BFAB97302272E9B4EA6D0F482F853122AF239C1F65C8335B7091413102CCD1675C767B686462E8E1B94DFF670F4F69122307C3AAC013B5112B2F564262A5E8DE4D58B097F43D017CDAA97C6843EB833175C60735563DF7F92AF1ACD211546A7958997473A18D23764933CEE9DC71CCD4C3E61E53DA702E> |-systemdict /gcheck known {setglobal} if end {end} ifendRSIYVB+TimesNewRomanPSMT /Encoding getdup 113 /q putpop%ADOEndSubsetFont
/RSIYVB+TimesNewRomanPSMT*1 [76{/.notdef}rp /L 21{/.notdef}rp /b /.notdef /d 3{/.notdef}rp /h 8{/.notdef}rp /q 6{/.notdef}rp /x /y /z 133{/.notdef}rp]RSIYVB+TimesNewRomanPSMT nfRSIYVB+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf282.786 108.68 mo(q)sh55.5197 285.051 mo
54.562 284.764 li
54.8494 283.806 li
55.8072 284.093 li
cp
53.776 286.094 mo
50.5197 283.028 li
54.9259 282.263 li
cp
573.557 286.311 mo
573.124 284.875 li
570.251 285.741 li
569.963 284.783 li
572.835 283.918 li
572.402 282.481 li
576.809 283.242 li
cp
566.422 286.895 mo
566.133 285.938 li
567.091 285.649 li
567.379 286.607 li
cp
62.2243 287.063 mo
58.3931 285.913 li
58.6806 284.956 li
62.5118 286.105 li
cp
66.0807 288.182 mo
65.1143 287.925 li
65.3712 286.959 li
66.3377 287.216 li
cp
559.669 288.788 mo
559.406 287.823 li
563.265 286.771 li
563.528 287.736 li
cp
555.809 289.839 mo
555.547 288.874 li
556.511 288.611 li
556.774 289.576 li
cp
72.8458 289.981 mo
68.98 288.953 li
69.237 287.987 li
73.1027 289.014 li
cp
76.7115 291.008 mo
75.7451 290.751 li
76.002 289.785 li
76.9684 290.042 li
cp
549.026 291.616 mo
548.787 290.645 li
551.461 289.987 li
552.652 289.662 li
552.915 290.627 li
551.712 290.955 li
cp
545.142 292.572 mo
544.904 291.601 li
545.875 291.362 li
546.114 292.333 li
cp
83.5096 292.73 mo
80.4609 292.005 li
79.6108 291.779 li
79.8677 290.813 li
80.705 291.035 li
83.7408 291.757 li
cp
87.4011 293.655 mo
86.4282 293.423 li
86.6595 292.451 li
87.6324 292.682 li
cp
538.334 294.247 mo
538.117 293.271 li
538.115 293.271 li
538.117 293.271 li
538.117 293.271 li
538.12 293.27 li
541.99 292.318 li
542.229 293.289 li
538.348 294.244 li
cp
534.429 295.114 mo
534.213 294.138 li
535.189 293.921 li
535.406 294.898 li
cp
94.2114 295.273 mo
90.3198 294.348 li
90.5511 293.376 li
94.4427 294.301 li
cp
98.1331 296.116 mo
97.1553 295.906 li
97.3648 294.928 li
98.3426 295.138 li
cp
527.596 296.632 mo
527.379 295.656 li
531.284 294.789 li
531.501 295.765 li
cp
523.677 297.484 mo
523.481 296.504 li
524.325 296.335 li
524.451 296.307 li
524.667 297.283 li
524.531 297.313 li
cp
104.978 297.582 mo
101.066 296.744 li
101.276 295.767 li
105.187 296.605 li
cp
108.9 298.415 mo
108.559 298.35 li
107.911 298.211 li
108.121 297.233 li
108.759 297.37 li
109.09 297.434 li
cp
516.813 298.858 mo
516.617 297.877 li
520.539 297.092 li
520.735 298.073 li
cp
512.891 299.643 mo
512.695 298.662 li
513.675 298.466 li
513.871 299.446 li
cp
115.774 299.74 mo
111.846 298.983 li
112.035 298.001 li
115.963 298.758 li
cp
119.702 300.496 mo
118.72 300.307 li
118.909 299.325 li
119.891 299.514 li
cp
506.001 300.934 mo
505.824 299.949 li
509.761 299.242 li
509.938 300.226 li
cp
502.064 301.641 mo
501.887 300.657 li
502.872 300.48 li
503.048 301.464 li
cp
126.597 301.756 mo
123.206 301.171 li
122.648 301.064 li
122.837 300.082 li
123.385 300.187 li
126.767 300.771 li
cp
130.539 302.436 mo
129.554 302.266 li
129.724 301.281 li
130.709 301.451 li
cp
495.159 302.868 mo
495.009 301.879 li
495.501 301.804 li
498.935 301.187 li
499.112 302.172 li
495.664 302.791 li
cp
491.204 303.467 mo
491.054 302.478 li
492.043 302.328 li
492.193 303.317 li
cp
137.437 303.626 mo
133.495 302.946 li
133.665 301.96 li
137.607 302.64 li
cp
141.406 304.222 mo
140.416 304.078 li
140.559 303.089 li
141.549 303.232 li
cp
484.283 304.516 mo
484.133 303.527 li
488.088 302.928 li
488.238 303.917 li
cp
480.328 305.115 mo
480.178 304.127 li
481.167 303.977 li
481.317 304.966 li
cp
148.334 305.224 mo
144.375 304.651 li
144.518 303.662 li
148.477 304.234 li
cp
152.293 305.797 mo
151.303 305.654 li
151.446 304.664 li
152.436 304.807 li
cp
473.407 306.164 mo
473.258 305.176 li
477.212 304.576 li
477.362 305.565 li
cp
469.453 306.764 mo
469.303 305.775 li
470.291 305.625 li
470.441 306.614 li
cp
159.221 306.799 mo
155.262 306.226 li
155.405 305.237 li
159.364 305.81 li
cp
163.179 307.372 mo
162.19 307.229 li
162.333 306.239 li
163.322 306.382 li
cp
462.502 307.72 mo
462.385 306.727 li
465.233 306.392 li
466.336 306.225 li
466.486 307.213 li
465.367 307.383 li
cp
458.53 308.187 mo
458.413 307.194 li
459.406 307.077 li
459.523 308.071 li
cp
170.128 308.345 mo
169.165 308.238 li
166.148 307.802 li
166.292 306.812 li
169.292 307.246 li
170.238 307.351 li
cp
174.103 308.786 mo
173.109 308.676 li
173.22 307.682 li
174.214 307.792 li
cp
451.578 309.005 mo
451.461 308.012 li
455.433 307.545 li
455.55 308.538 li
cp
447.605 309.473 mo
447.488 308.479 li
448.481 308.363 li
448.598 309.356 li
cp
181.061 309.558 mo
177.085 309.117 li
177.195 308.123 li
181.171 308.564 li
cp
185.036 310 mo
184.042 309.889 li
184.152 308.895 li
185.146 309.006 li
cp
440.653 310.29 mo
440.536 309.297 li
444.509 308.83 li
444.625 309.823 li
cp
436.68 310.758 mo
436.564 309.765 li
437.557 309.648 li
437.673 310.641 li
cp
191.993 310.772 mo
188.018 310.33 li
188.128 309.337 li
192.104 309.778 li
cp
195.969 311.213 mo
194.975 311.103 li
195.085 310.109 li
196.079 310.219 li
cp
429.7 311.45 mo
429.614 310.453 li
433.599 310.108 li
433.685 311.104 li
cp
425.715 311.795 mo
425.629 310.799 li
426.625 310.712 li
426.711 311.709 li
cp
202.947 311.933 mo
201.176 311.791 li
198.951 311.544 li
199.061 310.55 li
201.271 310.795 li
203.027 310.936 li
cp
206.934 312.252 mo
205.937 312.173 li
206.017 311.176 li
207.014 311.256 li
cp
418.741 312.4 mo
418.655 311.403 li
422.64 311.058 li
422.726 312.054 li
cp
414.756 312.745 mo
414.67 311.749 li
415.666 311.663 li
415.752 312.659 li
cp
213.911 312.812 mo
209.924 312.492 li
210.004 311.495 li
213.991 311.815 li
cp
217.899 313.132 mo
216.902 313.052 li
216.982 312.055 li
217.979 312.135 li
cp
407.782 313.35 mo
407.696 312.354 li
411.681 312.008 li
411.767 313.004 li
cp
224.876 313.691 mo
220.889 313.371 li
220.969 312.374 li
224.956 312.694 li
cp
403.797 313.695 mo
403.711 312.699 li
404.707 312.613 li
404.793 313.609 li
cp
228.863 314.011 mo
227.867 313.931 li
227.947 312.934 li
228.943 313.014 li
cp
396.799 314.168 mo
396.742 313.169 li
400.735 312.938 li
400.793 313.937 li
cp
392.806 314.399 mo
392.748 313.4 li
393.747 313.342 li
393.804 314.341 li
cp
235.859 314.518 mo
233.993 314.422 li
231.854 314.25 li
231.934 313.254 li
234.058 313.424 li
235.91 313.519 li
cp
239.854 314.723 mo
238.855 314.671 li
238.906 313.673 li
239.905 313.724 li
cp
385.818 314.803 mo
385.76 313.804 li
389.753 313.573 li
389.811 314.572 li
cp
381.824 315.033 mo
381.767 314.035 li
382.765 313.977 li
382.823 314.976 li
cp
246.844 315.082 mo
242.85 314.877 li
242.901 313.878 li
246.896 314.083 li
cp
250.839 315.287 mo
249.84 315.235 li
249.892 314.237 li
250.89 314.288 li
cp
374.836 315.438 mo
374.778 314.439 li
378.772 314.208 li
378.829 315.207 li
cp
257.83 315.646 mo
253.835 315.441 li
253.886 314.442 li
257.881 314.647 li
cp
370.843 315.668 mo
370.785 314.67 li
371.783 314.612 li
371.841 315.611 li
cp
261.825 315.851 mo
260.826 315.799 li
260.877 314.801 li
261.876 314.852 li
cp
363.835 315.949 mo
363.805 314.95 li
367.803 314.829 li
367.833 315.828 li
cp
359.837 316.07 mo
359.807 315.07 li
360.806 315.04 li
360.836 316.04 li
cp
268.831 316.17 mo
267.367 316.135 li
264.821 316.005 li
264.872 315.006 li
267.405 315.136 li
268.854 315.17 li
cp
272.83 316.265 mo
271.83 316.241 li
271.854 315.242 li
272.853 315.265 li
cp
352.84 316.281 mo
352.81 315.282 li
356.808 315.161 li
356.838 316.161 li
cp
348.842 316.402 mo
348.812 315.403 li
349.811 315.372 li
349.841 316.372 li
cp
279.828 316.431 mo
275.829 316.336 li
275.853 315.337 li
279.851 315.432 li
cp
283.827 316.526 mo
282.827 316.503 li
282.85 315.503 li
283.85 315.527 li
cp
341.845 316.614 mo
341.815 315.614 li
345.813 315.493 li
345.843 316.493 li
cp
290.824 316.693 mo
286.826 316.598 li
286.849 315.598 li
290.848 315.693 li
cp
337.847 316.734 mo
337.817 315.735 li
338.816 315.705 li
338.847 316.704 li
cp
294.823 316.788 mo
293.824 316.764 li
293.847 315.764 li
294.847 315.788 li
cp
330.835 316.839 mo
330.832 315.839 li
334.775 315.827 li
334.818 315.825 li
334.848 316.825 li
334.792 316.827 li
cp
326.835 316.852 mo
326.832 315.852 li
327.832 315.849 li
327.835 316.849 li
cp
319.835 316.875 mo
319.832 315.875 li
323.832 315.862 li
323.835 316.862 li
cp
315.835 316.888 mo
315.832 315.888 li
316.832 315.885 li
316.835 316.885 li
cp
308.835 316.91 mo
308.832 315.91 li
312.832 315.898 li
312.835 316.898 li
cp
304.835 316.923 mo
304.832 315.923 li
305.832 315.92 li
305.835 316.92 li
cp
301.05 316.936 mo
297.823 316.859 li
297.846 315.859 li
301.06 315.936 li
301.832 315.933 li
301.835 316.933 li
cp
f
%ADOBeginSubsetFont: LWYAAA+TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.systemdict beginRSIYVB+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B59F85E8A8526E50FEB33438675EDBBD0866093A4555E3EA3A35849B91EFFB88205281CC77395AC14DF328B50F1F179210F0307F50BFB242AA7F76F18203303EF0BF46B76E61FB539D568EF9F434EC657F4C5CDE1BCAA90A83BAFEB02869664DC06CC8CA4FA1E876C39F3F5371AD261F117CDAF8F6A4E96ECA4F5088752E105CDEB8FBEB2F7F82D31A2FEB6DF3C053295A006D723DEE7CEF30A9F16E8C6EE80DDA09053247> |-systemdict /gcheck known {setglobal} if end {end} ifendRSIYVB+TimesNewRomanPSMT /Encoding getdup 77 /M putpop%ADOEndSubsetFont
/RSIYVB+TimesNewRomanPSMT*1 [76{/.notdef}rp /L /M 20{/.notdef}rp /b /.notdef /d 3{/.notdef}rp /h 8{/.notdef}rp /q 6{/.notdef}rp /x /y /z 133{/.notdef}rp]RSIYVB+TimesNewRomanPSMT nfRSIYVB+TimesNewRomanPSMT*1 [18 0 0 -18 0 0 ]msf215.022 329.673 mo(M)shgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/RSIYVB+TimesNewRomanPSMT*1 uf/RSIYVB+TimesNewRomanPSMT uf/LWYAAA+TimesNewRomanPSMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
